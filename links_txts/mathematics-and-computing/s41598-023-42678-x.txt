Introduction Present-day farming is rapidly developing into a new period recognised as "agriculture 4.0". Agriculture 4.0 seeks to use new technology and approaches to address the problems plaguing current agriculture (such as climate change, illnesses, the overuse of chemicals and resources, etc.). This will hopefully improve efficiency and minimise risks. In order to achieve this goal, it makes use of a wide variety of cutting-edge forms of ICT 1 . In addition to these changes, the demand for food is on the rise; the UN’s Food and Agriculture Organization estimates that demand will increase by 70% by 2050 compared to current production levels in order to meet the requirements of a global population of around 10 billion by that year 2 , 3 . Agriculture 4.0 is predicted to see massive market growth over the next several years as a result of continued technological advancements and the rising global need for food. Solutions are widely used in Agriculture 4.0 because of the many advantages they offer to farmers (e.g., improved monitoring of environmental parameters related to crops, earlier detection of crop diseases, more accurate estimates of predicted yield, less time spent on manual labour) 4 , 5 . But the interconnectedness of diverse sensors and network devices allowed for numerous attacks 7 . This is because such devices frequently contain unpatched or outdated firmware or software 6 . Malware refers to any instance of a network attack 8 , 9 . Any form of disruption or distortion may offer significant obstacles and lead to severe repercussions in agriculture 10 , 11 . Monitoring and classifying network data has been a hot topic since the early days of the Internet because of its potential to thwart assaults 12 . Classifying network traffic to protect Internet of Things systems has been the topic of much research. Essential to Intrusion Detection Systems (IDS), it aids in the tracking down and elimination of potentially harmful network activities 13 . An IDS is a network monitoring device intended to identify suspicious or anomalous activity and allow preventative action against potential incursion threats. Consequently, there are two primary categories of intrusion detection systems: (1) NIDS and (2) HIDS. While HIDS systems may be used on any networked device with an Internet connection, NIDS are often implemented or situated at crucial network points to ensure they cover the sites where the traffic is most vulnerable to attack. IDS's most-used approaches for detecting intrusions 14 Signature-based intrusion detection systems (IDS), also known as misuse detection or knowledge-based detection, are as effective as real-time database updates because they focus on recognising the "signature," or unique pattern, of intrusion events. The anomaly-based IDS (also called behaviour-based detection) relies on frequent activity monitoring and machine learning methods to compare known, safe patterns of behaviour to any suspicious ones that may have emerged. Intrusion Prevention Systems (IPS) are used to thwart threats like Trojan horses, distributed denial of service attacks, and more once an administrator gets a warning from an IDS system 15 . In this work, we explore how to utilise deep learning to identify cyber risks (i.e., anomaly-based IDS). Recently suggested IDS arrangements use deep learning algorithms for IoT networks 10 , large data environments 16 , cyber-physical systems 17 , SCADA systems 18 , smart grids, internet-connected vehicles (IoVs), and cloud computing. Hail damage to crops, soil, etc. are all examples of areas where deep learning algorithms are employed in Agriculture 4.0. However, in the area of intrusion detection schemes for agriculture, there are eight major hurdles to overcome: One, collecting data on IIoT traffic cyberattacks; two, insufficient training data; three, training data that is not representative of the real world; four, poor data quality; five, irrelevant or unwanted features; six, seven, underfitting the training data; and eight, learning and deploying the model offline 18 . This difficulty is solved by the suggested model. Our article draws on widely-used, up-to-date datasets that are widely-utilized in the research community for the purpose of creating intrusion detection algorithms for IIoT networks. Limitations include IDSNet may have challenges in understanding the unique characteristics of Agriculture 4.0 environments, which involve diverse sensors, actuators, and communication protocols. Customizing IDSNet's detection rules and algorithms to consider the specific features and communication patterns of Agriculture 4.0 systems can help improve its accuracy. The most important contributions to this study are: Provide a presentation, assessment, and proportional analysis of techniques for cyber security; propose a deep learning-based system for intrusion detection in agriculture 4.0; therefore, the proposal is called IDSNet-PDO. Each suggested deep learning model's presentation is evaluated across two classification types using data from two recently released real-world traffic datasets (the dataset and the TON IoT dataset). Important performance metrics were the focus of the research. The remaining sections of this paper are organised as follows: In the second part, we'll examine some secondary sources. The use of IDS is described in “ Proposed system ” section. An in-depth look into IDS in Agriculture 4.0 is provided in " Results and discussion " section. In “ Conclusions ” section concludes with some last thoughts. Related works Three different types of deep learning-based IDS replicas have been developed by Ferrag et al. 19 They are based on deep networks. In this work, we compared and contrasted the efficacy of strategies for agribusiness 4.0 cyber security. The dataset and the TON IoT dataset, both of which include real-world traffic data, are used to analyse the presentation of each model across two categorization types (binary and multiclass). Key performance criteria favour deep learning techniques over conventional machine learning strategies. Furthermore, the CNN-based IDS model outperforms the IDS approaches as measured by their performance on the dataset with multiclass traffic finding, respectively. An intrusion detection arrangement based on federated learning has been projected by Friha et al. 20 to protect agricultural IoT infrastructures. They call it FELIDS. In particular, the FELIDS system protects information by relying on local learning, which is when devices learn from each other by exchanging only model updates with an aggregate server. This makes the detection model more accurate. The FELIDS system uses deep learning classifiers to protect against attacks on agricultural IoTs. The proposed IDS is evaluated on the CSE-CIC-IDS2018 benchmark, the MQTTset, and the InSDN. It is clear from the findings that the FELIDS organisation is superior to traditional, non-federated types of machine learning in terms of both accuracy and effectiveness in safeguarding the privacy of data collected from IoT devices. The review and analysis of intrusion have been completed by Ferrag et al. 21 In this paper, we detail the cyber security challenges facing Agriculture 4.0 and the criteria used to assess the effectiveness of intrusion detection systems. Next, we conduct an analysis of intrusion detection systems in light of current and forthcoming technological developments, such as the Internet of Things, autonomous tractors, drones, smart grids, and industrial agriculture. Based on the machine learning approach used, we present a detailed categorization of intrusion detection schemes in each developing knowledge area. We also showcase accessible tools used to assess the effectiveness of intrusion detection arrangements. Finally, we provide an overview of the difficulties and potential future research areas in intrusion detection for cyber safety in Agriculture 4.0. IoT networks used in agriculture have been the target of invasions; however, a system for identifying and categorising these attacks has been established by Raghuvanshi et al. 22 All applications of the Internet of Things have the same fundamental problem: how to ensure the safety and privacy of their users. The NSL KDD data set is used as an example input in this framework. First, the NSL-KDD data set has all of its symbolic characteristics translated into numerical features as part of its pre-processing. Principal is used to extract features. To further categorise the gathered information, we apply machine learning methods, and precision and recall metrics are used to compare the effectiveness of various machine learning algorithms. Through an examination of potential assaults and threats, Vangala et al. 23 want to learn more about the security scenarios that may be used in agriculture. Research on existing IoT testbeds in the agricultural sector has been conducted. An architecture for smart farming is presented, as well as technologies that could be used in conjunction with the proposed architecture. The direction of advancement in each agricultural security sub-area is discussed, and the lack of current protocols is identified via a literature analysis of safety protocols for different sub-sectors of security in smart agriculture and verification protocols in smart requests. In addition, the state of the art of industry-based IoT-based tools and systems has been investigated. Otoum et al. 24 present a novel (DLIDS) method for identifying potential security issues in IoT settings. While there is no shortage of IDSs described in the academic literature, many of them suffer from insufficient attack detection accuracy due to problems with feature learning and dataset management. In order to improve detection accuracy, we propose a module that uses a hybrid of the Spider Monkey Optimization algorithm (SMO) and the SDPN. The SMO algorithm is responsible for selecting the most informative features in the datasets, while the SDPN determines whether the data is typical or out of the ordinary. DoS U2R attacks, probing attacks, and remote-to-local (R2L) attacks are all recognised by DL-IDS. A battery of extensive experiments has shown that the suggested DL-IDS outperforms state-of-the-art tactics. Sengan et al. 25 hope to provide a solution for healthcare data by using dynamic, secure, and aware routing through machine learning (DARML). In this work, we offer a DoS detection scheme that uses an ML algorithm. To see the permitted procedure, one must first get access to the user. Users may then register and utilise correlation factors between nodes to compare route information. The user then selects the gadget that will initiate the data key's automated activation and decryption. In the final module, the DAR-ML is linked to all healthcare records. Next, both users and the administrator will be able to provide feedback on the findings. Those are the benefits you get from simplifying everything using the internet. Based on the analysis of 21.19 percent of all data flow, the results show an attack finding accuracy of over 98.19 percent, along with an excellently low false alarm likelihood. Lin et al. 26 suggest making adversarial harmful traffic records with a generative adversarial network architecture they call IDSGAN to fool and avoid being caught by intrusion detection systems. The adversarial attack examples carry out black-box assaults since the attackers do not know the fundamental structure and settings of the detection scheme. IDSGAN uses a generator to convert legitimate traffic records into adversarial data. A discriminator that also classes traffic instances learns the real-time black-box detection method. Moreover, the adversarial generation makes use of a controlled modification technique that was developed to protect the authentic attack capabilities of adversarial traffic records. Multiple algorithm-based detection models are subjected to various assault types to demonstrate the model’s efficacy. By varying the sample size of the modifications, robustness can be tested. Through a controlled experiment utilising adversarial attack baselines, we are able to prove that our model is better. Proposed system Here, we take a look at the IDSNet model, which was developed to identify cyber-attacks in Agriculture 4.0 and makes use of a one-dimensional convolutional neural network and the PDO. Network model The agriculture 4.0 network model is provided, which is composed of the following three layers: (1) agricultural sensors; (2) fog computing; and (3) cloud computing. The agriculture industry uses data gathered by drones and other Internet of Things sensors. When certain thresholds are met in the data collected by the agricultural sensor layer, the actuators below are triggered. To ensure that Internet of Things (IoT) devices always have access to power, new energy technologies and smart grid design are implemented in the sensor layer. Every fog node has an embedded deep learning intrusion detection system. To perform analysis and machine learning algorithms, the IoT data is sent from the agricultural sensors layer to the fog computing layer, while cloud computing nodes offer storage and end-to-end services. Typically, intrusion detection systems that rely on deep learning to process alerts send their processing to fog nodes. We assume that there is a malicious party intent on disrupting the network's operations in order to compromise food security, the effectiveness of the agri-food supply chain, and output. Pre-processing of the Cic-Ddos2019 dataset There are a total of 50,063,112 records in the CIC-DDoS2019 dataset 29 , consisting of 50,06,249 rows related to DDoS assaults and 56,863 rows related to normal traffic. with 86 characteristics in each row. Table 1 presents a summary of the dataset's attack statistics throughout both training and testing. SNMP and SSDP are used in the attacks. In a reflection-based DDoS assault known as an "NTP-based attack," an adversary hijacks a server running the Network Time Protocol (NTP) protocol to send an overwhelming amount of traffic across the User Datagram Protocol (UDP) to a single target. The target and its supporting network infrastructure may become inaccessible to legitimate traffic as a result of this attack. An attack that leverages the Domain Name System (DNS) to flood a target IP address with resolution requests is called a reflection-based DDoS assault. By sending queries to a publicly accessible vulnerable LDAP server, an attacker can generate massive (amplified) responses, which are then reflected to a target server, resulting in a DDoS attack. Reflection-based (DDoS) attacks, or "MSSQL-based attacks," include the attacker forging an IP address to make programmed requests seem to originate from the targeted server while really exploiting. NetBIOS-based attacks are a kind of reflection-based denial-of-service attack in which the attacker delivers forged "Name Release" or "Name Conflict" signals to the target system, causing it to reject any and all incoming NetBIOS packets. To jam the target's network pipes, an SNMP-based assault will produce attack volumes in the hundreds of gigabits per second using the Simple Network Management Protocol (SNMP). The reflection-based SSDP attack is a DDoS attack in which the attacker uses UPnP protocols to deliver a flood of traffic to the intended victim. This kind of attack uses IP packets carrying UDP datagrams to deliberately saturate the network connection of the victim host and cause it to crash. To compromise a Web server or application, a WebDDoS-based attack will use seemingly innocuous HTTP GET or POST requests as a backdoor. Syn-based attacks use the standard TCP three-way handshake and respond with an ACK to exhaust the victim server's network resources and render it unusable. As its name suggests, an attack based on the TFTP protocol uses online TFTP servers to get access to sensitive information. An attacker makes a default request for a file, and the victim TFTP server delivers the information to the attacker's target host. An example of this is the PortScan-based attack, which is similar to a network security audit in that it scans the open ports of a target computer or the whole network. Scanning is performed by sending queries to a distant site in an effort to learn what services are available there. Table 1 Kinds of attacks in the CICDDoS dataset. Full size table We generate three datasets, respectively titled "Dataset 13 class," to examine the efficacy of learning approaches in binary and multi-class classification. Tables 2 and 3 describe the statistics for each dataset regarding attacks during training and testing, respectively. Table 4 describes the attack categories in Dataset 7 class. Table 2 Attack categories in Dataset_2_class. Full size table Table 3 Attack categories in Dataset_13_class. Full size table Table 4 Attack categories in Dataset_7_class. Full size table Pre-processing of the Ton_IoT dataset A novel testbed for an IIoT network, the TON IoT dataset 30 includes information on the network, the operating system, and telemetry. Seven files containing telemetry data from Internet of Things and industrial Internet of Things sensors are given in Table 5 . Here's what you may expect to find within these files: File 1: “Train Test IoT Weather” includes the following conditions: Normal (35,000 rows), DDoS (5000 rows), injection (50,000 rows), Password (50,000 rows), and backdoor IoT data from a networked weather sensor, including temperature, pressure, and humidity values, are shown in the file. There are Normal (35,000 rows), DDoS, and Injection (2902 rows) in File 2 "Train Test IoT Fridge" (2942 rows). The file contains information on the sensor's temperature readings and environmental circumstances as they pertain to the Internet of Things. Train Test IoT Garage Door.txt has the following categories: normal (10,000 rows), ransomware (5804 rows). If you have a networked door sensor, this file will show you whether or not the door is open or closed. File 4 "Train Test IoT GPS Tracker" has the following categories and numbers of rows: Normal (35,000), DDoS (5,000), Injection (5,000), Password (5,000), Backdoor (5,000), Ransomware (2,833 rows), XSS (577 rows), and Scanning (550 rows). Data from a networked GPS tracker sensor is shown in the file, including its latitude and longitude readings, as an example of Internet of Things (IoT) data. You'll find the following data types in File 5: "Train Test IoT Modbus: Normal (35,000 rows), Injection (5,000 rows), Password (5,000 rows), Backdoor. IoT data file containing Modbus function code for reading an input register. There are 70,000 rows of normal data, 10,000 rows of DDoS data, 10,000 rows of injection data, 10,000 rows of password data, 10,000 rows of backdoor data, 4528 rows of ransomware data, 898 rows of XSS data, and 70,000 rows of scanning data in File 6 "Train Test IoT Motion Light" (3550 rows). In the file, we can see the Internet of Things data for a switch that may either be on or off. Included in File 7 "Train Test IoT Thermostat" are the following categories of data: Normal (35,000 rows), Injection (5,000 rows), Password (5,000 rows), Backdoor The file contains data from the Internet of Things that represents the temperature as it is right now according to a networked thermostat sensor. Table 5 Attack categories in TON_IoT dataset. Full size table IDSNet: design and configuration The current concept took some cues from CNN's practical uses. However, this model just needs a single raw input, and its reduced number of layers helps save time during training. The current concept takes some cues from CNN's practical uses. However, this model only needs a single raw input, and its reduced number of layers helps save time during training. Figure 1 depicts the design process as it was carried out. The first step was to fine-tune the training and optimization methods as well as the layer count, filter size, and filter amount. It was also necessary to tweak the network's hyper settings. These included the training lot size, learning rate, number of training cycles (epochs), and number of training signals (batch size). Table 6 provides the suggested values. And second, a CNN structure was built, and it's laid out in Table 6 . The number of layers in the model network determines the number and size of filters available in each convolutional layer. In this situation, the network layout shown by the bold fonts in the table below performed the best after being optimised by altering a few stated choices in the literature. Figure 1 depicts the filter setup and internal structure of the kernel. Figure 1 Internal structure of IDSNet. Full size image Table 6 Structure of IDSNetwork. Full size table The network employs algorithms to discover and prioritise the most relevant aspects of raw data for mining purposes. To achieve this goal, we apply a convolution process (convolutive layer) to the input data, resulting in a longer vector from which we use a maximum clustering criterion (max-pooling layer) to extract the most representative features. Table 6 shows that the same steps are performed four times with a different number of kernels added to each Convolutive plus Max-Pooling set. This adjustment is made so that feature maps may be generated that accurately depict the signals' non-linearity. Using a filter with a duration of three samples and a sliding pass of one sample, the first three values of a feature map are generated in sequence. The procedure is performed on each convolutional layer. It is possible to fine-tune this procedure by adjusting the number and size of filters (u), as well as the window's sliding factor (stride). Since the output vector of the final convolutional layer is the input vector of the fully connected layer, only its map length needs to be calculated during network design. The PDO method is used to fine-tune the IDSNet's hyper-parameters like momentum, learning rate, and epochs, as shown below. Prairie dog optimization The following were assumed to facilitate the development of models for the proposed PDO: Each prairie dog belongs to one of the m coteries in the colony, and there are n prairie dogs in each coterie. (i) Prairie dogs are all the same and can be classified into m subgroups, (ii) Each coterie has its own ward inside the colony, which represents the search area for the corresponding issue. Nesting activities generate an increase from ten burrow openings per ward to as many as one hundred. Both an antipredator call and a new food supply (burrow construction) call are used. It's only individuals of the same coterie that engage in foraging and burrow construction activities (exploration), communication, and anti-predator (exploitation) actions. Exploration and exploitation are repeated m (the number of coteries) times since other coteries in the colony undertake the same tasks at the same time and the whole colony or problem space has been partitioned into wards (coteries). Like other population-based algorithms, the prairie dog optimization (PDO) relies on a random initialization of the placement of the prairie dogs. The search agents are the prairie dog populations themselves, and each prairie dog's position is represented by a vector in d-dimensional space. Initialization Each prairie dog (PD) is a member of one of m coteries, where n is the total number of PDs. Because prairie dogs live and work together in groups called "coteries," each prairie dog's position within a given coterie may be uniquely determined by a vector. Positions of all coteries (CT) in a colony are shown by the matrix in Eq. ( 1 ): $$CT = \left[ {\begin{array}{*{20}c} {CT_{1,1} } & {CT_{1,2} } & {\begin{array}{*{20}c} \cdots & {CT_{1,d - 1} } & {CT_{1,d} } \\ \end{array} } \\ {CT_{2,1} } & {CT_{2,2} } & {\begin{array}{*{20}c} \cdots & {CT_{2,d - 1} } & {CT_{2,d} } \\ \end{array} } \\ {\begin{array}{*{20}c} \vdots \\ {CT_{m,1} } \\ \end{array} } & {\begin{array}{*{20}c} \vdots \\ {CT_{m,2} } \\ \end{array} } & {\begin{array}{*{20}c} {\begin{array}{*{20}c} {CT_{i,j} } \\ \cdots \\ \end{array} } & {\begin{array}{*{20}c} \vdots \\ {CT_{m,d - 1} } \\ \end{array} } & {\begin{array}{*{20}c} \vdots \\ {CT_{m,d} } \\ \end{array} } \\ \end{array} } \\ \end{array} } \right]$$ (1) When talking about a colony, the jth dimension of the ith coterie is denoted as CT (i,j). All of the prairie dogs in a coterie may be found at the coordinates given by Eq. ( 2 ): $$PD = \left[ {\begin{array}{*{20}c} {PD_{1,1} } & {PD_{1,2} } & {\begin{array}{*{20}c} \cdots & {PD_{1,d - 1} } & {PD_{1,d} } \\ \end{array} } \\ {PD_{2,1} } & {PD_{2,2} } & {\begin{array}{*{20}c} \cdots & {PD_{2,d - 1} } & {PD_{2,d} } \\ \end{array} } \\ {\begin{array}{*{20}c} \vdots \\ {PD_{n,1} } \\ \end{array} } & {\begin{array}{*{20}c} \vdots \\ {PD_{n,2} } \\ \end{array} } & {\begin{array}{*{20}c} {\begin{array}{*{20}c} {PD_{i,j} } \\ \cdots \\ \end{array} } & {\begin{array}{*{20}c} \vdots \\ {PD_{n,d - 1} } \\ \end{array} } & {\begin{array}{*{20}c} \vdots \\ {PD_{n,d} } \\ \end{array} } \\ \end{array} } \\ \end{array} } \right]$$ (2) where \(PD \left( {i,j} \right)\) stands for the jth dimension of the ith prairie dog in a pack and nm is the total number of dogs in the pack. Equations 3 and 4 depict the uniform distribution used to assign each prairie dog to its coterie. $$CT_{i,j} = U\left( {0,1} \right) \times \left( {UB_{j} - LB_{j} } \right) + LB_{j}$$ (3) $$PD_{i,j} = U\left( {0,1} \right) \times \left( {ub_{j} - lb_{j} } \right) + lb_{j}$$ (4) where \(UB_{j}\) and \(LB_{j}\) of the optimization problem, \(ub_{j} = \frac{{UB_{j} }}{m}\) and \(lb_{j} = \frac{{LB_{j} }}{m}\) , and U(0,1) is a random sum with a uniform distribution among 0 and 1. Fitness function evaluation By plugging the solution vector into the predefined fitness function, we can get the fitness value for each prairie dog site. To keep track of the results, we may use the array defined by Eq. ( 5 ). $$PD = \left[ {\begin{array}{*{20}c} {f_{1} ([PD_{1,1} } & {PD_{1,2} } & {\begin{array}{*{20}c} \cdots & {PD_{1,d - 1} } & {PD_{1,d} ])} \\ \end{array} } \\ {f_{2} ([PD_{2,1} } & {PD_{2,2} } & {\begin{array}{*{20}c} \cdots & {PD_{2,d - 1} } & {PD_{2,d} ])} \\ \end{array} } \\ {\begin{array}{*{20}c} \vdots \\ {f_{1} ([PD_{n,1} } \\ \end{array} } & {\begin{array}{*{20}c} \vdots \\ {PD_{n,2} } \\ \end{array} } & {\begin{array}{*{20}c} {\begin{array}{*{20}c} \cdots \\ \cdots \\ \end{array} } & {\begin{array}{*{20}c} \vdots \\ {PD_{n,d - 1} } \\ \end{array} } & {\begin{array}{*{20}c} \vdots \\ {PD_{n,d} ])} \\ \end{array} } \\ \end{array} } \\ \end{array} } \right]$$ (5) An individual prairie dog's fitness function value is a measure of the quality of food available at a given location, the likelihood of successfully excavating and populating new burrows, and the efficacy of its anti-predator alarm system. The fitness function values array is sorted, and the element with the lowest value is designated the optimal solution to the minimization issue. In addition to the following three, the greatest value is taken into account while designing burrows that help animals hide from predators. Exploration The PDO has four parameters it uses to determine when to switch between exploration and exploitation. The total number of possible cycles is cut in half, with the first half going toward exploration and the second half toward exploitation. There is a causal relationship between the two investigation tactics. on \(iter < \frac{{max_{iter} }}{4}\) and \(iter \le \frac{{max_{iter} }}{4} < iter < \frac{{max_{iter} }}{2}\) , while the two strategies for exploitation are conditioned on \(\frac{{max_{iter} }}{2} \le iter < 2\frac{{max_{iter} }}{4} \le iter \le max_{iter}\) . Equation ( 6 ) describes how our algorithm updates its location throughout the foraging phase of its exploration phase. The second plan of action is to analyse the digging strength and the quality of the found food sources thus far. The digging power used to create new burrows is calibrated to decrease with time. This limitation aids in controlling the burrowing population. Position updates during tunnel construction are described by Eq. ( 7 ). $$PD_{i + 1,j + 1} = GBest_{i,j} - eCBest_{i,j} \times \rho - CPD_{i,j} \times Levy\left( n \right)\forall iter < \frac{{max_{iter} }}{4}$$ (6) $$PD_{i + 1,j + 1} = GBest_{i,j} \times rPD \times DS \times Levy\left( n \right)\forall iter < \frac{{max_{iter} }}{4} \le iter < \frac{{max_{iter} }}{2}$$ (7) As demonstrated in Eq. ( 8 ), where \(GBest_{i,j}\) is the best global solution so far achieved, \(eCBest_{i,j}\) assesses the impact of the currently obtained best answer. In this experiment, q is the frequency of the specialised food source alert, which has been set at 0.1 kHz; rPD is the location of a random solution; and \(CPD_{i,j}\) is defined as the random cumulative impact of all prairie dogs in the colony. The digging strength of the coterie, denoted by DS, varies with the quality of the food supply and is determined at random by Eq. ( 10 ). The Levy(n) distribution is recognised to promote more effective and thorough investigation of the search space of a topic. $$eCBest_{i,j} = GBest_{i,j} \times \Delta + \frac{{PD_{i,j} \times mean\left( {PD_{n,m} } \right)}}{{GBest_{i,j} \times \left( {UB_{j} - LB_{j} } \right) + \Delta }}$$ (8) $$CPD_{i,j} = \frac{{GBest_{i,j} - rPD_{i,j} }}{{GBest_{i,j} + \Delta }}$$ (9) $$DS = 1.5 \times r \times \left( {1 - \frac{iter}{{max_{iter} }}} \right)^{{\left( {2\frac{iter}{{max_{iter} }}} \right)}}$$ (10) where r adds the stochastic property to guarantee exploration by taking either − 1 or + 1 as its value depending on whether the current iteration is odd or even, Despite the fact that the prairie dogs are considered to be identical in the PDO implementation, the small number represented by helps explain for these variances. Exploitation The point of PDO's exploitation mechanisms is to conduct extensive searches in the promising regions discovered during the exploration phase. Equations ( 11 ) and ( 12 ) model the two approaches used during this stage. Earlier, we discussed how the PDO toggles between these two tactics. to \(\frac{{max_{iter} }}{2} \le iter < 2\frac{{max_{iter} }}{4}\) and \(3\frac{{max_{iter} }}{4} \le iter \le max_{iter}\) , respectively. $$PD_{i + 1,j + 1} = GBest_{i,j} - eCBest_{i,j} \times \varepsilon - CPD_{i,j} \times rand\forall \frac{{max_{iter} }}{2} < iter < 3\frac{{max_{iter} }}{4}$$ (11) $$PD_{i + 1,j + 1} = GBest_{i,j} \times PE \times rand\forall 3\frac{{max_{iter} }}{4} < iter < max_{iter}$$ (12) As demonstrated in Eq. ( 8 ), where GBest (i,j) is the best global solution so far achieved, eCBest (i,j) assesses the impact of the currently obtained best answer. Equation ( 8 ) defines CPD (i,j) as the aggregate influence of all prairie dogs in the colony, where is a tiny integer representing the quality of the food supply. In Eq. ( 13 ), PE stands for the predator effect, and rand is a random integer between zero and one.. $$PE = 1.5 \times \left( {1 - \frac{iter}{{Max_{iter} }}} \right)^{{\left( {2\frac{iter}{{max_{iter} }}} \right)}}$$ (13) where \(iter\) is the current iteration and \(Max_{iter}\) is the supreme sum of iterations. Results and discussion Performance evaluation Agriculture 4.0 entails incorporating cutting-edge technology into standard farming practises to raise output and quality standards. Internet-of-Things gadgets, are all examples of such cutting-edge technology. We used and chose current data sets based on these technologies that include DDoS employed by Here, we focused on two recently released real-world traffic dataset 29 and the TON IoT dataset 30 . The TCP/IP communication stack compatibility, DDoS attack mitigation, and symbolic representation of Agriculture 4.0 all played roles in their selection. The TON IoT dataset was developed to mimic the functioning of actual operational IoT/IIoT networks via the use of interacting network parts and IoT/IIoT systems across the Edge, Fog, and Cloud. SDN and NFV technologies, such as those provided by the NSX-VMware platform, were used to better control the interplay between the three levels. The experiment is coded in Python 3 on a GPU using TensorFlow. The suggested model's hyper-parameters are summarised in Table 7 . Table 7 The hyper-parameters working in deep learning tactics. Full size table Performance metrics Important consideration should be given to the metrics used to assess the effectiveness of machine learning and deep learning approaches. Our analysis centres on the following key performance metrics: In Table 8 , we see examples of four potential classifications, two of which are incorrect. $$TNR_{BENIGN} = \frac{TN\_BENIGN}{{TN\_BENIGN + FP\_BENIGN}}$$ (14) $$FAR = \frac{FP\_BENIGN}{{TN\_BENIGN + FP\_BENIGN}}$$ (15) $$Precision = \frac{TP\_Attack}{{TP\_Attack * FP\_BENIGN}}$$ (16) $$Recall = \frac{TP\_Attack}{{TP\_Attack * FN\_Attack}}$$ (17) $$DR_{Attack} = \frac{TP\_Attack}{{TP\_Attack + FN\_Attack}}$$ (18) $$F - score = 2*\frac{{\left( {Precision * Recall} \right)}}{{\left( {Precision + Recall} \right)}}$$ (19) $$Accuracy = \frac{TP\_Attack + TN\_BENIGN}{{TP\_Attack + FN\_Attack + TN\_BENIGN + FP\_BENIGN}}$$ (20) $$DR_{Overall} = \frac{\sum TP\_Each - Attack - Type}{{\sum TP\_Each - Attack - Type + \sum FN\_Each - Attack - Type}}$$ (21) where innocuous data that is accurately identified as benign whereas False Positive (FP) suggests benign data that is wrongly identified as an attack. True Positive (TP) is information on an assault that has been appropriately identified as such. Attack data that is wrongly categorised as non-threatening is called a False Negative (FN). Table 8 Confusion matrix. Full size table The CICDDoS2019 dataset of seven classes is tested with different generic models and proposed models, which are shown in Table 9 . The existing models are tested with other different datasets; therefore, generic models are considered for comparison. The results are averaged and provided in Table 9 . Table 9 The performance experimental results comparative to benign and numerous kinds of attacks in Dataset_7_class. Full size table In Table 9 , the various attack types are taken into account for comparative analysis of accuracy among RNN, LSTM, and the proposed model. TNR (BENIGN) gives detection accuracy of 95 in RNN and 98% in LSTM, and the proposed model achieves 99% accuracy. In the DrDos_LDAP attack, RNN achieves 96% accuracy, 95% accuracy in LSTM, and 97% accuracy in the proposed system. The accuracy of other attacks like DrDoS_MSSQL, DrDoS_NetBIOS, and DrDoS_UDP shows the results of RNN as 96%, 69%, and 60%, while LSTM achieves 94%, 95%, and 71%, and the proposed attack gives better accuracy of 95%, 96%, and 75%. Syns achieves 100% accuracy on RNN LSTM and the proposed IDSNet-PDO. The proposed model has a higher detection ratio. Multi-class analysis on the second dataset is presented in Table 10 . Table 10 The presentation of deep learning tactics relative to normal and many categories of attacks in TON_IoT dataset. Full size table In Table 10 , the various attack types are taken into account for a comparative analysis of accuracy among RNN and LSTM with the proposed model. Normal gives detection accuracy of 93% in RNN, 94% in LSTM, and the proposed model achieves 96% of accuracy, whereas in DDos attacks, RNN achieves 94%, 95% in LSTM, and 98% in the proposed system. The IDSNet-PDO model gives a ratio for all attack categories: backdoor, ransomware, and XSS. For the different 13 classes of the first dataset, the results are provided in Table 11 . Table 11 Experimental findings on the efficacy of deep learning methods against both benign and malicious assaults on Dataset 13 class. Full size table In TNR (BENIGN), RNN, LSTM, and the proposed IDSNet-PDO achieve 100% detection accuracy. In DrDoS_DNS attacks, RNN achieves the least accuracy of 61%, LSTM has 56%, and proposed has a detection rate of 58%. In the DrDoS_LDAP attack, the existing technique as well as the proposed technique achieve a low value of 47%. DrDoS_SNMP also gives the same accuracy rate of 67% in RNN, LSTM, and the proposed model. DrDoS_SSDP gives 61% in RNN, 58% in LSTM, and the proposed achieves 52%. The attack DrDoS_UDP gives an accuracy of 47% in RNN, 48% in LSTM, and 46% in the proposed model. DrDoS_NetBIOS gives a moderate accuracy of 93% in RNN and 97% in LSTM, where the proposed method gives a lesser accuracy of 73%. Therefore, we attack various attacks, such as DrDoS_MSSQL and TFTP, and this is the rate of this attack, which must be improved in future work. Syn gives 64% in RNN and LSTM, where the proposed model gives 65%. TFTP gives maximum accuracy of 100% in RNN, 98% in LSTM, and the proposed achieves 94%. The other attacks, like DrDoS_NTP and UDP-lag, give 91% and 99% of detection accuracy in RNN and 91% and 98% in LSTM, where propose gives 92% and 97% of detection rate. In the WebDDoS attack, the experiment results give 23% accuracy in RNN, 24% in LSTM, and the proposed model attains a lesser of 20% accuracy. Table 12 illustrates that TNR (BENIGN) gives accuracy in RNN and LSTM of 96.99, whereas the proposed accuracy of TNR (BENIGN) attacks is 99%, and the attack gives 100% accuracy in RNN, LSTM, and proposed. Table 12 The performance experimental results of deep learning approaches relative in Dataset_2_class (Binary classification). Full size table Comparative analysis of proposed with existing techniques Most of the existing techniques mentioned in “ Related works ” section use machine learning techniques for DDoS attacks, but they have used various datasets. Therefore, these generic techniques are implemented with our system, and the results are averaged in Table 13 . Table 13 Overall average results of the proposed techniques with existing techniques. Full size table The average result provides a comparative analysis of various techniques in terms of different metrics. In the analysis of accuracy, the proposed model achieved 95.62%, whereas the existing practices achieved 80% to 94% accuracy. The auto-encoder achieved 91.68% of F-measure, 92.44% of precision, and 92.15% of recall; the LSTM model achieved 83.45% of F-measure, 84.32% of precision, and 85.93% of recall. Among other techniques, DT achieved 80% of recall, an F-measure of 80.43%, and 87.21% of precision, while the other model, called RF, achieved 89.54% of recall, 90.21% of precision, and 89.03% of F-measure. But the projected model achieved 94.62% recall, 98.32% precision, and 94.53% F-measure, where the reason for better performance is the usage of PDO for the selection of optimal features (the learning rate of IDSNet). Conclusions In the context of Agriculture 4.0, the investigated methods may be employed for traffic categorization via networks. This article contains a related works section with a collection of papers discussing the monitoring and categorization of network traffic. In this work, we create an IDSNet model that uses PDO to foresee potential attacks. In this work, we compared and contrasted the efficacy of strategies for agribusiness 4.0 cyber security. The CICDDoS2019 dataset and the TON IoT dataset, both of which include real-world traffic data, are used to compare and contrast the models’ performances across binary and multiclass classifications. The findings reveal that deep learning approaches outperform key performance measures. Also, with an accuracy of 95% and a precision of 98.32% on the whole dataset, the IDS model based on CNN beats the best deep learning IDS approaches that were tested using the dataset. The study's findings on the use of ensemble techniques in network traffic categorization seem highly encouraging. This research will then be integrated into an application that requires historical and near-real-time studies for network assault categorization, allowing threats and anomalous traffic to be detected, isolated, and/or alerted to. We also recommend testing these kinds of models on data from different sources and in other application areas. Moreover, similar approaches may be used in fields other than agriculture to learn more about the opportunities and limitations of various datasets. Ethics approval The submitted work is original and has not been published elsewhere in any form or language.