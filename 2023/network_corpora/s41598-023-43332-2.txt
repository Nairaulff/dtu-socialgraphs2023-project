introduction modern financial market experiencing increase interdependency among organization bank company even country interdependency form loan holding share liability institution connected interdependency form financial network connection amplify financial shock underlying asset spread financial contagion lead failure institution network known cascade failure lead catastrophic consequence economy people life instance global financial crisis caused occurrence cascade failure among bank north american market due mortgage default shock cascade failure financial system studied many year equation calculating market value bank based linear interdependency asset holding developed brioschi elliott built financial network model using linear equation introduced discontinuous value loss institution value drop critical level also studied simulated cascade failure linear interdependency network model number institution large keeping track cascade failure network becomes intractable problem orus proposed quantum version bank value calculation using equation proposed elliott model interbank network cascade failure share common assumption value institution ultimately depend value primitive asset independent interdependency among institution linear common assumption cascade failure studied financial network various structure interdependency core-periphery structure sector-segregation structure diem proposed mixed integer programming algorithm directly optimize liability bank total loss minimized financial shock interbank network model diem doe include discontinuous value loss brings nonlinearity network breed cascade failure result show network optimization could improve network resilience cascade failure capponi chen described mitigation systemic risk providing liquidity assistance multi-period clearing framework studied sensitivity systemic risk relation interbank liability correlation structure nier investigated structure financial system affect systemic risk varied four important parameter capitalization connectivity interbank exposure concentration addition investigated liquidity effect asymmetry banking structure roncoroni studied interaction financial network structure market condition context systemic risk draw distinction direct indirect interconnectedness study impact diversification portfolio allocation hu√© proposed new measure systemic risk combine pair-wise granger causality approach leave-one-out concept experimental result show size investment strategy bank significant driver systemic risk lux proposed bipartite credit network model non-bank corporate entity connected network bank basic characteristic seem predict contagion joint exposure corporate entity found important interbank credit ramadiah tested systemic risk bipartite network different network reconstruction strategy found original network displayed systemic risk reconstructed network proposed dynamic topic network dtn approach combine network analysis topic modeling evaluate systemic risk provide indication abnormal movement financial market birge present alternative viewpoint organization rational agent seek maximize expected utility markowitz portfolio sense mean cross-holdings calculated local agent perspective therefore take account mitigation systemic risk studied organization respond systemic risk evaluating various financial parameter using real world data work directly optimized cross-holdings organization global regulator perspective order mitigate systemic risk global network face exogenous shock reinforcement learning agent would good candidate extending work use multi-agent learning better understand mitigate systemic risk nonlinearity introduced interbank network model elliott crucial feature since model loss public confidence abrupt change value bank lead cascade behavior interbank network similar cascade failure financial crisis far know study done directly target mitigating highly nonlinear cascade failure aim fill gap network optimization model proposed diem provides solution drastic change connectivity may feasible practice addition also possible use diem model optimize large realistic interbank network due scalabilty issue developed optimization model strengthen interbank network resilience cascade failure easily scale optimize interbank network large number bank test performance optimization algorithm developed computational systemic risk environment cascade simulation based elliott model nonlinear value loss one-stage two-stage version optimization model extra stage network partitioning experimented classical quantum partitioning two-stage optimization model quantum partitioning performs best delaying cascade failure herman present thorough review quantum computing solving computationally challenging financial problem several optimization problem finance well machine learning algorithm could potentially benefit quantum computing covered many financial application portfolio management derivative pricing risk modeling collaterialized debt obligation cdo described specifically cdo section mention default risk connected systemic risk explains lead collapse entire economy like happened financial crisis cdo model treat systemic risk exogoneous random latent variable study correlation default risk paper computes systemic risk using agent based model aim find optimal action take regulator perspective control systemic risk grant benchmark empirical result optimal solution variety markowitz portfolio optimization instance computational ground truth solution using d-wave 2000q quantum annealer several control used programming quantum annealers may impact probability success studied effect multiple control reported yield higher probability sucess work deal portfolio theory problem quantum computing perspective local point view local understanding risk captured markowitz portfolio theory collective behavior many individual portfolio manager give rise global risk evaluated mitigated portfolio manager paper considers global viewpoint address systemic risk section computational systemic risk environment introduce computational systemic risk environment discus one-stage optimization model section interbank network optimization model two-stage optimization model quantum version section optimization model network partitioning section performance scalability present experimental result cascade mitigation using synthetic data section experimental result real-world data present experimental result real-world data computational systemic risk environment interbank network value calculation computational interbank systemic risk environment built based upon bank value equation formulated elliott aligned -\vec aligned value vector bank specifying value bank total number bank cross-holding matrix entry specifies percentage bank held also strength linear dependency bank bank self holding matrix specifies percentage bank value actually held equal 1-\sum self holding matrix used discount value bank calculated becomes non-inflated market value instead inflated equity value n_a assets-holding matrix entry specifies percentage asset held bank n_a\ total number asset n_a primitive price vector asset nonlinear penalty vector representing loss public faith bank crash nonlinearity open opportunity chaotic behavior network financial shock contributes overall systemic risk interbank network notice bank crash value drop critical threshold value set fixed percentage bank initial value interbank network generation testing generate interbank network environment randomized synthetic data optimize interbank network using algorithm original network optimized network apply shock simulate propagation shock network compare result original network optimized network multiple trial randomly generate entry however two extra consideration first summation column matrix must smaller bank self-holding equal 1-\sum must positive second random generation lead fully connected network rare bank real life directly connected cross-holdings therefore set threshold value instance 0.005 generated smaller threshold set particular generate entry randomly keeping asset completely owned bank use similar threshold technique cross-holdings generation case keep assets-holding relatively concentrated randomly generate value figure example interbank network visualization show bank node circular layout show bank node random layout use two layout interchangeably better illustration full size image figure visualization interbank network model contains bank randomly generated dependency two different visualization layout show network circular layout random layout circular layout left node positioned circularly represent bank bank connected cross-holdings shown arrow within circle formed node random layout right node represent bank arrow node specify cross-holdings among bank layout thickness arrow connecting node represents strength direction cross-holding two bank cross-holding bank bank specified value financial shock cascade failure simulation based upon network model shown fig financial shock simulated cause cascade failure within interbank network total number crash network given certain amount shock measure level systemic risk higher number crash indicates higher level systemic risk simulation modeled iterative algorithm newly failed bank current layer input next iteration layer core equation value bank within network structure shown fig calculated bank said fail value element drop critical value v^c_ smaller bank fails suffers additional value loss element perturbation start cascade failure asset perturbation perturb asset held bank decreasing value asset perturbation characterized parameter parameter 0,1 perturbation amplitude higher decrease value asset total number bank parameter specifies number asset whose value would decreased perturbation full cascade simulation algorithm shown pseudo code algorithm cost incurred defaulted failed bank 21.7 market value organization asset average therefore penalty vector crashed bank generated vector element corresponding crashed bank assigned value 21.7 initial value bank non-crashed element zero procedure algorithm loop calculating initial crashed bank due asset perturbation word source cascade within loop cascade process interbank network simulated figure show example run cascade failure simulation interbank network bank asset circular layout initial asset perturbation example =0.7\ =24\ result perturbation bank crashed iteration interbank network crashed figure cascade simulation visualization interbank network bank converged iteration bank shown orange node failed bank shown black node failed bank incur loss bank cross-holdings shown red edge red edge interpreted pathway financial contagion loss propagation cascade process triggered asset perturbation iteration full size image get general cascade simulation result vary number perturbed asset input algorithm beta generate different random network bank take average number total failure convergence result shown fig figure average cascade simulation result showing bank failure relative increasing number perturbed asset random interbank network generated generate asset perturbation start cascade record total number bank failure cascade simulation terminates take average number failure network plot average number y-axis given full size image see fig number perturbed asset larger drastic increase number crashed bank phase transition soon bank fail network real life cascade almost bank failing could catastrophic consequence therefore goal optimize network structure whole interbank network resilient financial shock failure would incurred cascade process word hope postpone cascade shown fig right shift phase transition failure occurring around larger beta value achieve first develop one-stage optimization algorithm describe section interbank network optimization model based algorithm develop algorithm better efficiency called two-stage optimization describe section optimization model network partitioning interbank network optimization model mitigating systemic risk network optimization goal research understand mitigate systemic risk interbank network want modify interbank network structure make resilient financial shock achieve optimization algorithm minimizes loss occur due crash bank used computational systemic risk environment allows compute quantitative measure severity cascade failure multiple trial using algorithm minimizing quantitative measure via network optimization mitigate cascade failure interbank network implementation optimized network require bank adjust amount loan holding liability connection mixed integer linear programming formulation inspired work done diem formulate nonlinear interbank network structure optimization problem mixed integer linear programming milp problem described section mitigating systemic risk network optimization minimizing total value loss bank cascade process loss bank value directly due penalty vector seek minimize loss nonlinear optimization model shown aligned v_i ,1\right aligned aligned s.t e_i aligned aligned init aligned equation objective function minimizing parameter set 0.217 corresponds fact bank loses 21.7 value crash described section financial shock cascade failure simulation specifies percentage bank owned bank quantity indicates loss bank due failure bank inner sum total loss bank network due failure bank therefore outer sum total loss bank network due failure bank goal minimize total possible loss network cascade failure value bank denominator minimum operator ensures bank never loss larger total value objective function piece-wise linear concave minimum operator sum concave function concave thus optimality remains minimum operator quantity exposure bank bank total holding bank calculated init init cross-holding matrix interbank network optimization constraint ensures total exposure bank remains constant constraint ensures proportion bank value held remains unchanged even though systemic risk minimized bank become disconnected stop holding share would link cascade spread unrealistic ask bank increase self-holding level therefore optimization algorithm aim mitigate cascade failure rearranging bank cross-holdings without changing total liability overall financial structure remove minimum operator objective function expanded milp optimization model auxiliary decision variable temp binary variable two constraint added replace minimum operator milp formulation shown aligned temp temp aligned aligned s.t temp =\frac v_i aligned aligned temp aligned aligned aligned aligned e_i aligned aligned init aligned decision variable temp added auxiliary variable remove min operator original objective function given y1_ y2_ 0,1\ temp set three auxiliary variable size decision variable n-1 total number bank network big number constraint ensure equivalence temp v_i ,1\right following way requires exactly one binary equal exactly one constraint longer active therefore temp either greater equal v_i ,1\right since algorithm solver minimizing objective function try fix minimum two value ensure optimality milp algorithm described would return optimal indicates optimal cross-holdings bank one example change cross-holdings random network optimal network bank shown fig fig see contraction cross-holdings optimization one potential issue optimization requires relatively large change bank connection current cross-holding structure could unrealistic real life issue reduced using two-stage optimization method discus section optimization model network partitioning nevertheless current optimization algorithm able select enhance certain cross-holdings non-trivial way decreasing cross-holdings achieve cascade-resilient structure figure example interbank network using one-stage optimization left plot circular layout visualization randomly generated interbank network bank right plot network cross-holding optimization full size image curse dimensionality decision variable classical milp algorithm set temp y1_ y2_ size n-1 number bank therefore total number decision variable grows quadratically size network general complexity optimization problem grows drastically number decision variable grows quadratically size network accordingly problem could become intractable using one-stage optimization algorithm size interbank network large often case real life banking network instance around 5,000 commercial bank currently north america according fdic quarterly report federal deposit insurance corporation facing complexity issue large interbank network apply notion network modularity community partition whole interbank network different module bank within module generally high connectivity apply optimization individual module large optimization problem decomposed multiple small optimization problem way size optimization problem reduced curse dimensionality mitigated optimization model network partitioning overcome curse dimensionality described section curse dimensionality unrealistic cross-holding change section mixed integer linear programming formulation incorporate network community partitioning interbank network optimization algorithm convert one-stage optimization whole network optimization multiple module community multiple module optimization procedure consists two stage first find module interbank network optimize cross-holdings module therefore define multiple module optimization two-stage optimization state motivation intuition behind two-stage optimization section motivation using network modularity introduce modularity optimization algorithm network community partitioning section defining network modularity define modularity interbank network section defining interbank network modularity define ising formulation interbank network modularity optimization section ising formulation network modularity optimization discus detail two-stage optimization section two-stage optimization algorithm motivation using network modularity milp optimization aimed finding optimal connection bank within network minimize incurred loss due bank failure reminder decision variable percentage bank held liability connection applying community partitioning interbank network optimization way decrease size milp problem instead solving large milp containing bank solve several smaller milps corresponding different module community within whole interbank network optimizing subset decision variable leaving cross-holdings bank different community module unchanged therefore one natural question arises would reduction optimization problem lead worse performance term mitigating cascade failure comparison experimental result original one-stage optimization two-stage optimization indicates performance delaying cascade failure similar computational time requirement significantly reduced shown section performance scalability discus intuition similar performance optimizing cross-holdings bank community module intuitive cascade failure modeled algorithm originates sudden drop asset value due asset perturbation sudden drop value asset bank hold asset suffer drop value bank value drop critical threshold incur discontinuous value loss bank discontinuous value loss leading loss failure would start cascade failure within iteration cascade failure algorithm cascade failure reinforces sense crashed bank previous iteration would become source bank failure next iteration intuitively best way mitigate self-reinforcing chain failure would confining failure initial iteration beginning bank crashed incurred value loss spreading local scale within bank highly connected crashed bank highly connected group bank bank highly dependent term liability exactly constitute module community interbank network therefore confine cascade beginning confine cascade within local module community overall strategy mitigate cascade failure interbank network reason discussed applying community partitioning interbank network optimizing liability structure bank within module becomes intuitive highly plausible figure show example community interbank network interbank network shown random layout better visualization community structure figure two figure show randomly generated interbank network show community network computed using interbank modularity full size image interbank network example shown fig network shown fig figure right show community structure interbank network example different community module shown different color figure show cascade simulation example interbank network cascade simulation process fig cascade simulation visualization validates insight discussed section see cascade failure indeed spread community module first therefore optimizing cross-holdings module suffice confining cascade failure stop wave bank failure also supported experimental result shown section performance scalability later figure cascade simulation visualization bank shown node different color corresponding different community failed bank shown black red edge interpreted pathway loss propagation similar fig notice visualization cascade financial contagion occurs within community first motivates two-stage optimization full size image discussed critical role module play controlling cascade failure let turn algorithm used detect community module network section defining network modularity defining network modularity definition graph definition graph consists finite set vertex node finite set edge connecting verticies vertex connected edge definition graph terminology graph undirected graph element indicate two-way relationship edge traversed direction graph directed graph element indicate one-way relationship edge traversed single direction graph weighted graph element given numerical weight definition community definition community respect graph defined subset node densely connected node loosely connected node community graph interbank network connectivity uniformly distributed throughout network node within community module higher connectivity compared node belonging different community specifically two node belong module community likely connected community structure common characteristic network studied depth graph theory community partitioning task extracting community defined definition large network one approach community partitioning optimize modularity indicates quality community detected louvain algorithm developed blondel particular greedy optimization method modularity optimization iteratively update community produce largest increase modularity heuristic-based optimization algorithm doe provide optimality guarantee community find generally requires user specify convergence criterion implementation terminate algorithm modularity gain two iteration 1e-5 applying louvain algorithm directed graph defined definition common approach simply forget edge direction detecting community large network run louvain algorithm simplified undirected network classical network partitioning experiment non-weighted non-directed network modularity called defined aligned -\frac aligned matrix element adjacency matrix represents edge node node otherwise total number edge within non-weighted non-directed d_i\ number node connected node c_i\ community node delta function defined node belong community otherwise intuition behind definition following want maximize assigning node community term -\frac relatively large term would large edge node node large degree connection node graph relatively small therefore measure relative density edge inside community respect edge outside community non-directed weighted network weighted modularity defined almost however weighted network adjacency matrix replaced correlation matrix matrix element indicating strength connection node correspondingly weighted network case sum weight edge connected node directed weighted network directed modularity defined aligned -\frac aligned in-degree out-degree node intuition non-directed network still applies case maximize would assign node community delta function term -\frac relatively large term large exists strong edge node large node doe already large in-degree node doe already large out-degree relatively small defining interbank network modularity interbank network work thought directed weighted graph interbank strength edge defined cross-holding matrix instance bank hold bank share 0.2\ directed edge pointing node graph interbank edge direction specifies direction loss propagation systemic risk computational environment defined section computational systemic risk environment network community interbank network would mean bank within community share large part discontinuous value loss due bank failure definition modularity interbank similar modularity directed defined in-degree node corresponds loss received bank similarly out-degree node corresponds loss bank cause network total loss incurred bank network intuition applies interbank network assign bank bank community term -\frac relatively large term large bank vulnerable loss incurred bank failure large bank cause high loss network high bank incur high loss bank network high following intuition modularity interbank network defined aligned interbank -\frac aligned aligned v_j aligned aligned v_j aligned aligned v_j aligned =0.217\ mentioned section financial shock cascade failure simulation ising formulation network modularity optimization network partitioning formulated simulated annealing optimization problem turn formulated quantum annealing problem quantum computer efficiently solve problem eventually able scale larger problem reichardt bornholdt shown modularity function expressed hamiltonian ising spin glass connection modularity ising spin glass important since exploited develop new physics-inspired algorithm maximize modularity using simulated annealing recently quantum annealing thanks advance quantum computer hardware developed quantum partitioning algorithm directed weighted graph take account realistic physical constraint interbank network chose implement network partitioning using modularity quantum annealing order compare classical partitioning quantum annealing quantum annealing particular type adiabatic quantum computation aqc follows adiabatic theorem quantum mechanic chakrabarti developed general quantum annealing framework solve hard optimization problem adiabatic reduction quantum fluctuation physical system work provides framework realizing analog quantum computation comprehensive complete review adiabatic quantum computing aqc presented albash lidar reviewed major theoretical development aqc algorithmic advance limitation provided example solving hard optimization problem also showed aqc evolved universal alternative approach gate-based quantum computer recent succinct overview adiabatic quantum computing recently published rajak provided analytical numerical evidence quantum annealing yield better solution compared simulated thermal annealing several glassy system result corroborate claim quantum tunnelling advantage thermal fluctuation overcoming barrier local minimum thus getting system equilibrated around corresponding ground state also gave insight still unresolved problem aqc area yarkoni another recent review paper quantum annealing use solving many combinatorial optimization problem known np-hard paper lay fundamental motivation behind quantum annealing exhibit state-of-the-art software hardware used quantum processor expose different application author identified limitation showed potential benefit researcher practitioner industry theorem adiabatic theorem let t/t\ 0,1 hermitian operator e.g hamiltonian varies smoothly arbitrarily large varies slowly term gradually changing condition allow system adapt configuration hence probability density modified process behavior allows adiabatic quantum computation used d-wave quantum annealing optimization system d-wave quantum computing company specializing aqc d-wave latest quantum computer d-wave advantage quantum processing unit qpu consisting qubits coupler operates temperature -273.135^\circ physically implemented superconducting loop qubits arranged unit cell qpu coupler used establish entanglement qubits interconnecting unit cell architecture known chimera pegasus graph d-wave machine use find lowest energy eigenvalue ising hamiltonian _\text ising represents minimal energy state global minimum physical system aligned _\text ising -\frac initial tunneling hamiltonian h_i final problem hamiltonian aligned tunneling energy problem hamiltonian energy pauli matrix acting qubit h_i\ qubit bias coupling strength qubits beginning annealing process system ground state corresponds lowest energy eigenstate tunneling hamiltonian end annealing process system energy eigenstate final problem hamiltonian adiabatic theorem state annealing process done successfully system remains ground state throughout process corresponds global minimum optimization perspective ising formulation network modularity problem solved d-wave mapped onto ising quadratic unconstrained binary optimization qubo objective function respectively defined calude aligned _\text ising i=1 h_i s_i i=1 j=i+1 s_i s_j ising aligned aligned =\sum x_i x_i x_j =\underset 0,1\ min x^tqx qubo aligned h_i\ parameter appear _\text ising upper-triangular matrix real coefficient serve weight easily ising formulation qubo formulation using following change variable s=2x-1\ optimization reformulated using binary quadratic model bqm encode ising qubo model solved using heuristic classical annealing quantum annealing use matrix binary variable size number node number community element indicates whether node community node community otherwise node belongs single community node must satisfy aligned j=1 aligned define jth column vector matrix define matrix aligned aligned modularity written aligned j=1 aligned matrix generalizes enables find multiple community within network optimal community partition network corresponds maximum value ising formulation interbank network modularity network community partitioning problem described section defining network modularity formulated constrained integer linear programming problem solved using quantum annealing quantum annealing implemented using open source d-wave system section first discus detail general framework using quantum annealing solve constrained integer linear programming problem derive new bqm formulation interbank network modularity interbank defined special case framework let consider following integer linear programming problem general form aligned aligned subject constraint aligned z=\lambda =0,1 k-1 aligned cost function trying minimize matrix dimension 4n^2\ vector length vector contains optimization variable restrict considering case positive integer cost function linear part hamiltonian constraint need convert quadratic hamiltonians constraint z=\lambda derive quadratic cost function follows aligned aligned ^t\lambda ^t\lambda z^t ^ta_ ^ta_ z^t ^t\lambda ^t\lambda aligned aligned hence total cost hamiltonian aligned cost k-1 z^t ^ta_ ^ta_ z^t ^t\lambda ^t\lambda aligned since ^t\lambda constant drop cost make cost general also add weight various part instead summing minimization cost constraint let add weight front cost function better control important minimization cost constraint large emphasize role minimization cost whereas small emphasize role constraint final cost function aligned cost k-1 z^t ^ta_ ^ta_ z^t ^t\lambda aligned convenience write cost explicitly expanding matrix multiplication using index aligned aligned cost k-1 ^ta_ ^ta_ ^t\lambda k-1 ^ta_ ^ta_ ^t\lambda aligned aligned know first 2n^2\ variable positive non-binary integer last 2n^2\ variable binary integer generalize assuming number non-binary integer given via parameter note still assume non-binary variable queued beginning vector rest binary variable non-binary positive integer written binary expanded form using bit follows aligned i=0 d-1 =0,1 ,2n^2-1 aligned bit binary representation expanding non-binary integer term bit instead 4n^2\ variable 4n^2 d-1 binary variable problem encode d-wave machine order implement cost function term binary variable ,2n^2-1 i=0 d-1\ =2n^2-1 ,4n^2-1\ note aligned i=0 d-1 j=0 d-1 j=0 d-1 i+j aligned case =\nu\ simplified aligned i=0 d-1 j=0 d-1 j=0 d-1 i+j i=0 d-1 4^ix_ d-1 i+j aligned used fact square binary variable equal ^2=x_ thus final form cost function containing binary variable follows aligned aligned cost k-1 m-1 ^ta_ j=0 d-1 i+j 4n^2-1 ^ta_ 4n^2-1 m-1 ^ta_ i=0 d-1 m-1,4n^2-1 ^ta_ i=0 d-1 m-1 ^ta_ ^t\lambda i=0 d-1 4n^2-1 ^ta_ ^t\lambda aligned aligned formulation constrained integer linear programming problem solved d-wave quantum annealer interbank network community partitioning problem discussed section defining interbank network modularity specifically constrained optimization problem defined viewed special simpler case hamiltonian special case corresponds situation number non-binary integer m=0\ number bit binary expansion d=1\ modularity optimization problem binary variable written follows aligned aligned j=1 subject j=1 aligned aligned using similar method fold constraint objective function get quadratic cost function form corresponding relaxation coefficient assign weight objective function also expand vector variable optimization becomes aligned w\sum j=1 i=1 m=1 i=1 j=1 1\right aligned expanded aligned w\sum j=1 i=1 m=1 i=1 j=1 l=1 j=1 1\right aligned used fact square binary variable equal first term corresponds term w\hat decision variable directly binary instead integer hamiltonian already quadratic form second term represents lagrange multiplier used encode constraint two-stage optimization algorithm section discus two-stage optimization algorithm combine one-stage optimization model section mixed integer linear programming formulation network partitioning algorithm section defining interbank network modularity ising formulation network modularity optimization specifically first apply network community partitioning interbank network find highly connected community module bank apply one-stage optimization individual module smaller interbank network algorithm shown algorithm two stage algorithm first stage network partitioning interbank network using algorithm discussed section defining interbank network modularity ising formulation network modularity optimization one thing notice need keep record cross-holdings bank different module inter-module cross-holdings optimizing second stage need use reconnect optimized module intuitively cross-holdings included optimization correspond liability connection really contributing cascade failure modularity guarantee weaker link module compared within module instance discussed section motivation using network modularity cascade failure generally develop within module early iteration cascade simulation left-out cross-holdings cross-holdings convey bank failure later stage cascade cascade failure already gone control therefore benefit optimizing cross-holdings second stage individual module optimization using milp optimization algorithm one-stage optimization developed section mixed integer linear programming formulation within module minimizing total incurred discontinuous loss due potential failure bank achieve minimization finding optimal cross-holdings bank bank figure one visualization optimization change cross-holding structure randomly generated example interbank network shown circular layout figure example interbank network using two-stage optimization left plot circular layout visualization randomly generated interbank network shown fig bank right plot network two-stage optimization using algorithm notice change cross-holdings drastic fig full size image network shown fig interbank network shown fig similar one-stage optimization visualization fig contraction cross-holdings optimization random generated network one thing notice concern raised end section mixed integer linear programming formulation large change cross-holdings extent mitigated two-stage optimization change cross-holdings drastic one-stage optimization fig reduction change cross-holdings result solution realistic implementation regulator two-stage optimization algorithm optimization operating within module thus change cross-holdings local scale also realistic figure show visualization two-stage optimization network fig showing module different color four module individually optimized connection bank different module grey line unchanged figure two-stage optimization visualization using example network fig showing community different color using circular layout see clearly cross-holdings edge within four community individually optimized cross-holdings edge different community unchanged full size image performance scalability performance scalability two-stage classical partitioning tested performance interbank network optimization algorithm described previous section experiment used one shown fig vary number perturbed asset input cascade simulation algorithm plot total number failed bank simulation terminates ideally want postpone cascade phase transition shown fig larger value cascade simulation result random unoptimized network associated one-stage two-stage optimized network shown fig value generate random network random network apply two different optimization one-stage two-stage therefore ten set network set containing one random network one optimal network one-stage optimization one optimal network two-stage optimization defined random one-stage optimal two-stage optimal final number failure convergence shown fig average result run set figure average cascade simulation result showing bank failure relative increasing number perturbed asset random network one-stage optimized network two-stage optimized network random interbank network generated generate asset perturbation start cascade record total number bank failure cascade simulation terminates take average number failure network optimization plot average number y-axis given full size image fig see one-stage optimization two-stage optimization postpone phase transition larger value rightward shift phase transition around around indicates optimal interbank network resilient perturbation withstand intense asset perturbation without exhibiting cascade failure see similar performance one-stage optimization two-stage optimization fig term mitigating cascade failure two-stage optimization three advantage one-stage optimization first two-stage optimization algorithm requires change cross-holding structure achieve similar cascade failure mitigation realistic achievable bank real life second shown fig two-stage optimization slightly outperformed one-stage optimization two-stage withstands two additional perturbed asset exhibiting cascade failure third importantly computation two-stage optimization far efficient one-stage optimization discussed section curse dimensionality solving milp whole network one-stage optimization becomes intractable size network large however two-stage optimization successfully reduces size optimization problem partitioning problem multiple smaller network figure time comparison one-stage optimization two-stage optimization increasing interbank network size x-axis show size interbank network optimized y-axis show total running time one-stage optimization two-stage optimization see considerable running time improvement using two-stage optimization compared one-stage optimization full size image time complexity comparison two algorithm shown fig vary number bank generating interbank network network size take average computation time optimizing ten network using two algorithm see apart noisiness random generation rapid growth computation time one-stage optimization computation time two-stage optimization grows linearly control number module number bank per module doe change interbank network size increase therefore size individual optimization second stage approximately word number optimization increasing rather size individual optimization problem time complexity linear number module grows linearly number bank therefore two-stage optimization drastically reduce time complexity interbank network optimization easily scale realistic interbank network larger size keeping similar even better performance one-stage optimization quantum computing implementation section discus challenge encountered implementation two-stage optimization method algorithm quantum partitioning discussed section ising formulation network modularity optimization reminder two-stage optimization first partition interbank network different module based cross-holdings optimize module individually adapting quantum partitioning discussed section defining interbank network modularity hope find better interbank network module fig reduced computational time thus optimizing important connection achieving better cascade mitigation compared classical heuristic partitioning figure comparison quantum classical partitioning example interbank network full size image ising formulation interbank partitioning problem discussed detail section defining interbank network modularity worked two d-wave system solve particular quantum annealing problem initially used d-wave 2000q solver d-wave system qubits chimera graph embedding upgraded using d-wave advantage system 1.1 5000q solver d-wave system qubits different topology pegasus p16 graph embedding terminate quantum partitioning algorithm iterates three time without change interbank modularity figure show process implementing binary optimization problem example partition network bank n=30 module k=3 due quantum hardware constraint therefore following would binary quadratic model bqm problem binary decision variable bqm problem corresponds hamiltonian spin system visualized graph shown fig node spin hamiltonian graph bank expands spin particle indicating module bank spin hamiltonian system d-wave conduct topological embedding map partitioning optimization problem d-wave hardware compatible form using different quantum processing unit qpu topology one embedding minor embedding using chimera pegasus embedding graph figure chimera graph embedding particular spin hamiltonian system shown fig fig pegasus graph embedding see pegasus graph embedding enabled upgraded 5000-qubit hardware higher embedding capacity compared chimera graph embedding therefore used experiment figure example spin hamiltonian graph chimera pegasus embeddings n=30 k=3 full size image however due hardware limitation use minor embedding limitation size interbank network partitioning problem solved using figure show spin hamiltonian graph n=60 k=4 fig show pegasus embedding almost embedding space utilized figure show boundary existence embedding varying number bank module embedding boundary limit scalability two-stage optimization quantum partitioning therefore section performance scalability two-stage quantum partitioning compare algorithm performance limit size interbank network n=50 ensure always embedding n=50\ generally smaller n=50\ k=6\ inside boundary k\ge particular randomly generated interbank network discard network generate new one upgrade 2000-qubit system 5000-qubit system show quantum computing scale hardware improves figure example spin hamiltonian graph chimera pegasus embeddings n=60 k=4 full size image figure set possible quantum interbank network embeddings full size image performance scalability two-stage quantum partitioning figure cascade failure simulation result random network one-stage optimization classical quantum two-stage optimization interbank network bank full size image figure time comparison one-stage optimization classical quantum two-stage optimization interbank network bank two-stage optimization quantum partitioning take much time full size image figure one stage optimization slight advantage two-stage optimization measured total possible loss however one-stage optimization underperforms two-stage optimization term delaying cascade failure shown fig full size image tested performance two-stage optimization quantum partitioning d-wave system used testing constrained network bank larger network able handled larger quantum computer future figure show type performance result fig addition quantum optimization approach notice unoptimized network start 1/3 bank failing bank network 1/8 bank failing bank network 50-banks network phase transition two-stage classical partitioning doe quite match one-stage optimization 200-banks network two-stage quantum partitioning outperforms classical method beat two-stage classical partitioning able find better partition able mitigate cascade effectively surprisingly beat one-stage optimization demonstrating appropriate network partitioning actually result better cross-holdings optimization global one-stage optimization accurate network partitioning two-stage optimization optimizing important cross-holdings confining source cascade accurately figure show type time complexity result fig addition quantum optimization approach show two-stage classical partitioning time complexity increase slowly one-stage quantum partitioning show little increase figure show total possible loss relative increasing number bank also show two-stage optimization come higher total possible loss outperforming one-stage optimization term delaying cascade failure shown fig conclusion minimum total possible loss doe mean best performance term delaying cascade failure result show minimizing total possible loss best way mitigate systemic risk demonstrate optimizing cross-holdings locally within module better confines contagion hence better delay cascade failure heatmap visualization cascade failure insight cascade failure process developed heatmap visualization tool heatmap display interbank network array cell cell bank color cell indicating relationship bank current value critical value v_c\ bank value higher v_c\ corresponding cell color within range yellow green higher value green cell bank value v_c\ bank failed color corresponding cell red bank randomly assigned cell without regard connectivity figure show cascade process random network bank initial perturbation bank bank failure shown red spread heatmap contaminate whole map iteration case bank fail cascade failure occurs whole interbank network failed figure show cascade simulation perturbation optimized network using two-stage optimization classical partitioning perturbation longer incurs cascade failure within network simulation terminates three iteration result bank fail end cascade failure completely mitigated interbank network figure heatmap visualization cascade simulation random network full size image figure heatmap visualization cascade simulation two-stage optimized network full size image experimental result real-world data demonstrate performance methodology real world network use data cross-holdings debt among nine country six euro-based country plus japan united kingdom united state table show data total cross-holdings million extracted report bank international settlement column represent country whose asset held row represent holding country table raw cross-holding matrix non-normalized c_0\ full size table convert matrix normalized cross-holdings matrix _0\ must first compute self-holding matrix amount _0\ mentioned section interbank network value calculation using assumption made reinhart kenneth estimate outside holding debt country 1/3 total holding thus self-holdings double sum outside holding using data value give _0\ combined cross-holding matrix c_0\ form original dependency matrix appears table table original dependency matrix _0\ full size table example interpret dependency matrix _0\ consider following example entry table portugal usa represents value usa holding portugal asset thus much usa harmed portugal debt loses value matrix cross-holdings seen weighted directed graph shown fig arrow show way loss flow country country cascade simulation table original primitive asset value applied perturbation full size table assume primitive asset proportional gdp gross domestic product country normalizing portugal gdp shown table initial value v_0=a_0 aligned v_0 bmatrix 19.1755 22.5502 9.6336 14.3569 29.4733 7.3081 14.4945 23.8985 58.3153 bmatrix aligned simulate cascade applied perturbation vector shown third column table randomly generated perturbation vector value ranging maximum relative primitive asset relative gdp value country compute debt value country iteration starting initial value v_0\ new value v_i\ 0.95 original value critical value v_c=0.95 v_0\ country said failed discontinuous value penalty 0.5 original bank value applied b_i=v_i/2\ figure simulation result showing failed country relative increasing value critical threshold use high critical value threshold 0.95\ simulation ensure cascade triggered algorithm stress tested full size image figure imulating cascade using real-world data full size image figure simulating cascade using real-world data one-stage optimization full size image figure simulating cascade using real-world data two-stage optimization full size image figure show result running cascade simulation multiple critical threshold value computing number failure using real-world network data value 0.88 result failure intentionally chosen high critical value threshold 0.95\ ensure cascade triggered simulation algorithm stress tested figure show simulation cascade using real-world network data five iteration nine country failed figure one-stage optimization converges one iteration five failure figure two-stage optimization converges one iteration four failure localised within cluster performance real-world network data parallel performance synthetic data shown section performance scalability ability two-stage optimization confine contagion locally within cluster beneficial scale country therefore anticipate scalability demonstrated synthetic data extend real-world data conclusion experimented one-stage optimization algorithm based milp formulation globally optimizes cross-holdings across interbank network order minimize total loss two problem algorithm scalability network grows change connection cross-holdings drastic implementation practice would realistic order address scalability issue developed two-stage optimization model using network partitioning classical quantum algorithm first stage developed new classical quantum partitioning algorithm directed weighted graph using classical partitioning two-stage optimization experimental result show computationally efficient two-stage algorithm good one-stage sense delaying cascade failure scale node using quantum partitioning two-stage optimization creates better partition delay phase transition cascade come additional computational efficiency benefit due quantum superposition effect however able test organization due quantum hardware limitation quantum hardware improve time addition classical quantum network partitioning algorithm found two-stage optimization creates optimized network fewer drastic change cross-holdings would realistic implement furthermore experimental result show minimizing total possible loss equivalent delaying cascade failure demonstrate optimizing cross-holdings locally within module better confines contagion hence better delay cascade failure used synthetic data real-world data ass algorithm show benefit approach mitigating systemic risk financial system combined computational efficiency benefit real-world result aligned synthetic result demonstrated two-stage quantum algorithm resilient financial shock delay cascade failure phase transition systemic risk reduced time complexity