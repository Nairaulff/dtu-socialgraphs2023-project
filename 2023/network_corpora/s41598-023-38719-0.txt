introduction recent year many new network-oriented service emerged information network changing rapidly example rapidly developing telepresence service allow human user experience present remote place virtually operating remote robot body using virtual reality mixed reality technology several different service yet realized expected emerge future service need virtualized multiaccess edge computing environment currently standardized along fifth-generation network technology network-oriented service consist service function deployed multiple device service function developed various developer available service function via application interface apis network service function formed made available service function combined service chain service provider provided meet user requirement environment surrounding network change time example requirement new service increase new service function may developed popularity service function may change addition due breaking change apis user may able use service service provider may create new service chain xavier examined api change impact java library client application found number apis affected increase time frequency breaking change given api increase time 0.29 time first year development 0.49 time fifth year breaking change possible change service reconfigured use new alternative apis reconfiguration service accommodation requires development cost including development cost interface connection new alternative apis thus development cost become high new interface developed time required connected many apis advance therefore adaptable service function network design required allow service function network accommodate new service low cost adapting environmental change requires addition interface service function development new service function thus design decision expedient short term made cost maintaining adapting system future increase known technical debt predicting api change service likely require accommodated newly connecting service function required fewer interface adaptable service function network composed time however meet new unpredictable service demand difficult predict change service function network consisting service function developed different developer therefore service function network continue adapting unpredictable change low development cost required refer service function network change structure low cost maintaining ability provide new service evolvable service function network algorithm evolvability include genetic algorithm gas evolution strategy applied variety problem however algorithm based presumption problem solved described optimization problem environmental change service function network include significant increase service function new seldom used service grow example due increased popularity difficult predict environmental change occur future environmental change may occur future numerous list difficult mathematically represent future environmental change goal optimization problem thus method dealing traditional optimization problem maintain service function network evolvable long term investigating core/periphery structure allows service component effectively adapt user request environmental variation core/periphery structure model flexible efficient information-processing mechanism biological system information processing unit core/periphery structure classified core peripheral unit advantage core/periphery structure help reduce cost maintaining changing service distinguishing service function core peripheral function unlike module-based design service function network designed based core/periphery structure accommodate different service modifying peripheral function reusing core function long term keeping core periphery appropriate size architecture expected adapt large increase service function change commonly used function method maintaining network based core/periphery structure determine structure network next stage based topology service function network current time therefore expected able continue evolve stable low cost regardless inability predict environmental change previous work showed network-oriented service designed based core/periphery structure adapt environmental change low development cost reusing core recreating periphery numerically investigated advantage core/periphery structure accommodating information service represented chain function addition focused shopping experience service using mixed reality robot use case realizing service scenario based implemented service actual device demonstrated service design using core/periphery structure effective robot operation number device type user side remote side increase paper propose method evolve entire network service function based core/periphery structure goal maintain service function network high service ability providing stability low development cost service-providing ability ability accommodate many new service chain accommodate service short service chain length using service function required shorter service chain lead responsive service function connected sparsely peripheral function occupy network development cost adding new function small chain length long requires extra function accommodate service chain service function network composed full mesh core function occupy network service chain short length developer must add many interface maintain fully meshed network adding new service function make development cost significant make impossible maintain service future thus propose method maintain appropriate scale core peripheral function trade-off development cost service-providing ability evaluated method term service accommodation ratio service chain length show service function network maintain high service-providing ability method applied addition evaluated development cost required evolve service function network simulation result revealed service function network continue evolve low development cost figure show proposal based core/periphery structure left side represents service function network using core/periphery structure adapt new device service changing periphery right side show method proposed paper evolves entire service function network renewing core figure overview proposed method full size image contribution follows propose method evolve service function network using core/periphery structure show service function network continue evolve low cost maintaining size density core periphery remainder paper organized follows section problem formulation evolvable service function network describes design problem problem formulation section density control service function network describes method control service function network evaluation section describes evaluation method finally conclusion section provides concluding remark area future study related work algorithm evolvability algorithm evolvability include gas evolution strategy applied variety problem addition kashan proposed modularly varying goal make adapt varying environment however algorithm based presumption problem solved described optimization problem environmental change may occur future numerous list difficult mathematically represent future environmental change goal optimization problem propose method evolve service function network adapt unpredictable environmental change accommodation service chain many study done accommodating deploying service chain network function virtualization example bian proposed distributed scheme approximates chain composition performance guarantee adapts resource failure timely manner cai proposed active service chain reconfiguration mechanism based computational load resource demand study predict resource demand factor based previous data continue evolve service function network long term field software development design methodology provide service cost module-based design widely introduced module-based design module connect via interface developer decouple reuse however disadvantage module-based design development becomes complex product become difficult maintain albers pointed interdependency among module used different product increase change module affect product result module development becomes complex becomes difficult maintain module product although albers focused vehicle development module-based design service also complicates development module connected equal basis interdependency importantly module case service function sometimes created several different developer thus difficult developer observe scope effect change modify module lead maintenance difficulty modification service and/or module thus entire service function network developed different developer need adaptable accommodate many new service problem formulation evolvable service function network paper assume many service function created software developer service function connected function interface apis describe system model define evaluation metric section system model service function network service chain consider network consisting service function interface connect network service function time represented directed graph g_t pit pot l_t consisting set input-side peripheral function pit set output-side peripheral function pot set core function set link l_t\ node network represents service function work independently function link l_t\ represent set link among service function interface available service function service function call link exists service provider attempt connect service function use based input data output data want acquire directed graph connecting service function input side output side service chain call service chain sc_t\ using existing interface known service chain instance given service function network g_t\ fig chain shown fig known chain subgraph g_t\ known service chain represented directed graph g'_t pit pot l'_t g'_t\ subgraph g_t\ pit pot l'_t\ subset pit pot l_t\ respectively assume function used function function used function figure example service function network g_t\ full size image figure example g'_t\ full size image service accommodation section describes accommodation service chain paper assume service chain accommodated combination interface allows service function included service chain used given order g'_t\ service chain subgraphs g_t\ accommodated example chain fig unknown accommodated service function used function however case service function communication originally required used link provides shorter chain efficient service call minimum number interface required accommodate given service chain sc_t\ chain length sct service chain combination unreachable service function shown fig accommodated figure example service chain accommodated using service function interface full size image figure example service chain accommodated full size image definition metric development cost increase probability accommodation service chain provide service short chain length additional interface service function required based information available time determine interface t+1 add link define development cost required accommodate service chain number link added aligned t+1 l_t| aligned service accommodation ratio let ac_ =1\ service chain accommodated g_t\ ac_ =0\ otherwise set service chain arising time accommodation ratio aligned ac_ aligned goal maximize represents service accommodation ratio increased parameter weight list symbol table table symbol definition full size table density control service function network consider realization evolvable service function network difficult solve problem optimization problem difficult express unknown future service requirement mathematical form therefore enable service function network evolve maintaining core/periphery structure appropriate size density refer density control section describes method determining interface t+1 approach based density control two given block human brain connection strength within block connection strength block mandn connection strength within block block core block peripheral block show term organization brain function brain develops module become separate number core-periphery pair increase strength connection within block strength connection block negatively correlated separated indicate state well-developed function service function relationship negative correlation density block density within block facilitates development function block small dependency block important density block density core block density peripheral block explains density block greatest separated monolithic structure density block smallest interrelationship density core block peripheral block required sufficiently smaller density within core block facilitate development sufficiently greater density within peripheral block accommodate service chain addition approach enables distinguish core block periphery block determine t+1 network topology information regardless content service function frequency use determining service function network distinguishing role core periphery based frequency use service content service function conceivable difficult obtain information service function predict future information service function network role service function change accommodate unknown service chain time therefore control service function network peripheral function newly regarded core function keeping inequality service function network based core/periphery structure connection function block represented adjacency matrix block =1\ interface i\in j\in available =0\ m=n\ within f_c\ define d_m\ density within function block aligned i\in j\in i\ne aligned define density block aligned i\in j\in aligned hereafter refer density within and\ and\ d_c\ respectively density core block peripheral block and\ respectively figure example service function application method full size image figure example service function adding core function full size image figure example service function adding link peripheral function full size image adding link accommodate unknown service chain focus service function connected one service function let set link connecting set link connecting block belongs t+1 determined algorithm simulation control density following order get result order switched figure show example service function network method applied peripheral function increase input side line 1–5 control d_c\ select two function random f_c\ add link method randomly selects node link node link added determined based information frequency use degree service chain arise future difficult predict adding link randomly lead accommodating variety service chain make density core block sufficiently greater density block add link following condition met -d_ th_ -d_ th_ d_c dmin_c\ core function require sufficiently higher density density core peripheral block availability sufficiently densely connected function block provides shorter chain length efficient service figure show example service function network process complete line 6–11 control core size randomly select node f_c\ add link considered f_c\ including becomes new core block system transition next state least one following condition met coresize coresize_ max cpi th_ cpo th_ size core required within certain range maintaining large core requires large number additional link increase development cost small core maintain sufficient service-providing ability accommodation ratio chain length line 12–21 control randomly select node node new f_c\ add link make density block sufficiently greater density within peripheral block add link following condition met -d_ th_ -d_ th_ -d_ th_ -d_ th_ set second fourth condition avoid adding unlimited number link line 22–29 control randomly select peripheral node block add link make density within peripheral block sufficiently great become function block add link following condition met -d_ th_ dmin_p\ -d_ th_ dmin_p\ set second fourth condition avoid adding unlimited number link figure show example service function network process complete evaluation comparable method evaluated effectiveness density control method comparing three method first one shortest-path accommodation method method add link connect node service chain service chain subgraph g_t\ chain length minimized service chain accommodated development cost high link must added different service chain thus compare service accommodation ratio development cost used density control second method low-cost accommodation density control requires development cost add link service function regardless whether service chain occurs maintains size density core peripheral function low-cost accommodation enables service chain occurring low development cost possible specifically calculate much accommodation ratio increased link node add link largest value repeat link available increase accommodation ratio third method random node selected randomly link added development cost density control note link method except shortest-path accommodation add f_c\ simulation program executes algorithm following order step first give initial state service function network network consists core block f_c\ input-side peripheral block output-side peripheral block second environmental change occurs add peripheral function probability specifically generate random number r\le function randomly selected otherwise function randomly selected new function connected selected node leaf add three additional peripheral function step third method determines t+1 development cost accommodation ratio calculated t+1 method evaluation metric evaluated method following three metric first calculated accommodation ratio service chain evaluate ability method accommodate new service chain assumed random shortest-path accommodation method use development cost density control method step created service chain step following way first selected one input node one output node random node f_p\ leaf candidate input output node service chain respectively second randomly selected node generate service chain node input output node number node step n_t\ number node selected set n_i note connected order node node f_c\ node chain connecting input node selected node output node service chain service chain selected based core/periphery classification t=0\ remaining selected based core/periphery classification density control applied focus new service chain use core function previously used core function second used development cost low-cost accommodation method try accommodate service chain little cost possible development cost density control show method change structure service function network sufficiently low development cost evaluated development cost calculated development cost method achieve objective step evaluate much development cost density control shortest-path accommodation method require compared low-cost accommodation method accommodate service chain calculated development cost accommodating service chain generated shortest distance unlimited development cost available shortest-path accommodation method development cost method explained section problem formulation evolvable service function network third used chain length low-cost accommodation method expected higher disadvantage requiring extra path taken accommodate service chain longer chain mean use service function communication path required provide service lead degradation responsiveness service therefore calculated chain length density control method length low-cost accommodation method service chain consisting function minimum value -1\ given service chain subgraph g_t\ simulation calculated represents many time longer chain length compared -1\ minimum chain length indicator service responsiveness simulation result used network represented fig parameter shown table executed method t=40\ repeated time figure service function network t=0\ full size image table parameter setting evaluation full size table service accommodation figure example accommodation ratio service chain full size image figure accommodation ratio service chain full size image result accommodation ratio calculation shown fig accommodation ratio example evolution path service function network shown fig figure show accommodation ratio execution method accommodation ratio following evolutionary path excerpt 30th later step effect initial network state diminished horizontal axis represents evolutionary step vertical axis represents note random shortest-path accommodation method use development cost density control method step step executed accommodation ratio approach nearly density control applied low-cost accommodation method decrease fewer node bi-directionally linked i.e. function used mutually network accommodate service chain use new core function density control method number combination function used mutually increased densely connecting peripheral function new core function result possible accommodate service chain use core function previously part core accommodation ratio stable node service chain arriving step connected using development cost density control method size network increase course evolution length service chain increase shortest-path accommodation method incurs higher development cost accommodate longer service chain accommodation ratio lower long service chain arise density control method applied accommodation ratio close 1.0 almost evolutionary path shortest-path accommodation random method applied variance accommodation ratio large method take cost additional apis link service function accommodate emerged service chain shortest-path accommodation method try minimize chain length step without considering possible future use apis result accommodation ratio show shortest-path accommodation method link added previous step reused accommodating new service chain random also large variation service accommodation ratio density control also randomness process however fact accommodation ratio doe increase random method add link completely random result indicates effective maintain relationship core periphery scale based core/periphery structure development cost figure example development cost full size image figure development cost full size image result calculating development cost step shown fig horizontal axis represents evolutionary step vertical axis represents development cost step density control method add time link low-cost accommodation method setting however low-cost accommodation calculates accommodation ratio possible link larger service function network difficult becomes find optimal link add vast possible combination node cost shortest-path accommodation method shown fig development cost required accommodate service chain including accommodated shown fig development cost shortest-path accommodation method increase significantly link added rarely reused future development cost low-cost accommodation shortest-path accommodation highly dependent parameter setting length number service chain arriving difficult predict service chain occur future however development cost density control dependent content service chain based network topology chain length accommodate service length chain density control low-cost accommodation shown fig respectively density control method requires 1–2 time shortest length service chain control density f_c\ low-cost accommodation method requires 3–5 time shortest length service chain add link peripheral function determines link based accommodation ratio result peripheral function become closer connected ring-like shape low-cost accommodation method modified shorter chain length performs process shortest-path method development cost becomes higher shown fig figure chain length density control full size image figure chain length low-cost accommodation full size image evolvability service design simulation result revealed proposed method enables service function network evolve accommodate new service chain density control method achieves stable high service chain accommodation ratio multiple evolution path addition development cost used apply density control independent number length future service chain provides advantage changing structure service function network future long period time method require additional development cost accommodate new service depending number length service chain difficult predict service chain arise future expect advantage becomes significant size service function network service chain become larger set development frequency new peripheral function one month per step simulation result show service accommodation ratio development cost month applying method service function network enables network evolve lower cost facilitates development service quickly evolutionary step shorter many step taken month simulation step taken difference low-cost accommodation term service accommodation ratio increase difference shortest-path accommodation term development cost increase therefore advantage method greater time complexity proposed method n_t n_t\ number node time loop used density control single-loop comparison method shortest-path accommodation number node service chain complexity low-cost accommodation n^2 verifies possible link space complexity proposed method n_t requires service function network input constant number variable store node add link comparable method n_t well therefore time/space complexity proposed method high method conclusion accommodate large number service low cost service design need adaptable user requirement environmental change previous work shown network-oriented service designed based core/periphery structure adapt environmental change low development cost implementing specific network-oriented service however practice service provider combine various service function developed several developer via interface apis provide service user therefore entire network service function required adapt environmental change difficult predict paper proposed method evolve entire service function network method evolves service function network low development cost keeping core peripheral function appropriate scale evaluated method term service accommodation ratio service chain length show service function network maintain high service-providing ability applying method addition evaluated development cost required evolve service function network simulation result revealed proposed method enables service function network continue evolving accommodate new service chain shorter chain length future work includes addressing problem place service function providing method adapt service function network unavailability service function