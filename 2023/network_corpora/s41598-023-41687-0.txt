introduction sorting well-known algorithm implemented algorithm solve biological scientific engineering big data problem popular sorting algorithm quicksort important algorithm divide-and-conquer concept sort data partition data smaller size divide sort data conquer basically step quicksort algorithm first step partitioning divide data using pivot recursively smaller size step run data smaller algorithm cutoff size finally sorting step executed sort data several work study parallel sorting algorithm multi-core cpu branch misprediction cache miss parallel sorting algorithm avoid branch misprediction reduce cache miss improving locality develop parallel sorting algorithm multi-core cpu concept used design parallel sorting algorithm improve performance paper propose parallel multi-deque partition dual-deque merge sorting algorithm consists three phase multi-deque partitioning phase block-based parallel partitioning thread contains double-ended queue deque keep boundary block phase partition data block push new boundary partitioned data dual deque dual-deque merging phase executed merge data correct position using new boundary dual deque without compare-and-swap operation two phase recursively executed data sufficiently small finally sorting phase executed sort data independently work openmp library execute parallel sorting algorithm several metric measure performance algorithm compare sequential sorting algorithm run time speedup speedup per thread moreover switch hoare partitioning lomuto partitioning algorithm multi-deque partitioning phase finally perf profiling tool run measure metric analyze performance algorithm proposed parallel sorting algorithm block-based partitioning concept problem merging data block solution compare swap leftover data middle array use sequential parallel partitioning algorithm partition paper dual-deque merging phase proposed main contribution solve problem reduce compare-and-swap operation algorithm consume run time paper contribution follows parallel sorting algorithm called multi-deque partition dual-deque merge sorting algorithm mpdmsort contains multi-deque partitioning dual-deque merging sorting phase proposed partitioning algorithm multi-deque partitioning phase hoare lomuto partitioning algorithm compared run time speedup speedup/core thread metric measured perf profiling tool mpdmsort parallel balanced quicksort multiway merge sort compared analyzed organized paper follows background related work shown section background related work multi-deque partition dual-deque merge sorting algorithm proposed section multi-deque partition dual-deque merge sorting algorithm section experiment result discussion show experiment result discussion parallel sorting algorithm finally conclusion future work shown section conclusion background related work section introduces sequential standard sorting algorithm called stlsort parallel standard sorting algorithm called parallel balanced quicksort bqsort multiway merge sort mwsort finally proposed compared related parallel sorting algorithm sequential parallel standard sorting algorithm sorting standard library function sequentially sort data stlsort important sorting function c++ language developer implement function declaring algorithm directive contains introsort algorithm consists quicksort heapsort data sufficiently small insertion sort executed sort data two standard sorting algorithm parallel mode parallel balanced quicksort bqsort parallel sorting algorithm block-based partitioning concept tsigas zhang algorithm block run compare-and-swap operation swap leftover middle data sequential partitioning algorithm executed multiway merge sort mwsort separate data equally sort independently parallel multiway merge algorithm called merge data parallel note requires array used store temporary data algorithm stable quicksort algorithm related parallel sorting algorithm performance many quicksort algorithm improved parallel algorithm technique executed shared memory system parallel quicksort algorithm concept begin partitioning data parallel next partitioned data merged data smaller sorted sorting algorithm independently parallel quicksort algorithm ideal parallel random access machine using fetch-and-add instruction proposed speedup parallel quicksort processor sorting data tsigas zhang proposed pquicksort sorting algorithm divide data block neutralizes parallel speedup 32-core processor obtained implementation parallel quicksorting using pthreads openmp 2.0 presented multicore standard template library proposed contains parallel sorting algorithm similar tsigas zhang concept speedup 3.24 achieved 4-core processor parallel introspective sorting algorithm using deque-free work-stealing technique proposed multisort parallel quicksort algorithm partition data sort independently using quicksort merges parallel presented speedup 13.6 achieved sorting data using algorithm 32-core processor man proposed parallel sorting algorithm named psort divide data several group sort locally parallel sorted group data merged finally sorted sequentially speedup 24-core processor meanwhile parallel introspective quicksort developed run embedded omap-4430 consists dual core processor speedup 1.47 mahafzah show parallel sorting algorithm multipivot concept partition data thread speedup 3.8 2-core hyperthreading technology processor parallel partition merge quick sort ppmqsort proposed speedup 12.29 core hyperthreading technology xeon e5520 obtained taotiamton kittitornkun presented parallel hybrid dual pivot sort hdpsort partitioning function two pivot partition data moreover lomuto hoare partitioning algorithm implemented performance compared speedup 3.02 2.49 obtained amd fx-8320 intel core i7-2600 machine respectively year marszałek introduced parallel modified merge sort algorithm based parallel random access machine proved sort element maximum time 2n-\log -2\ one year later marszałek proposed fully flexible parallel merge sort algorithm computational complexity optimized operational time equal flexible increasing number processor core block-based sorting algorithm named multistack parallel partition sorting algorithm mspsort presented thread left right stack keep boundary block partition leftmost rightmost array middle array run time better bqsort mwsort intel i7-2600 amd r7-1700 r9-2920 processor moreover parallel quicksort algorithm otis-hhc optoelectronic architecture proposed al-adwan average effeciency 1,152 processor 0.72 langr schovánková developed multithreaded quicksort named cpp11sort parallel speedup 44.2 obtained 56-core server 14.5 10-core hyperthread machine recently dual parallel partition sorting algorithm dppsort proposed divide data two part partition independently parallel using openmp multi-swap function called merge data without compare-and-swap operation speedup 6.82 obtained 4-core hyperthread intel i7-6770 machine several method improve performance sorting algorithm marowka investigated sorting algorithm proposed cormen vector-based quicksort algorithm work implemented using process-based thread-based model however exhibit good scalability overhead gebali proposed parallel multidimensional lookahead sorting algorithm suitable gpgpu massively parallel processor system cortis developed parallelised modified quickselect algorithm used concept quicksort algorithm algorithm implemented parallel quicksort algorithm result showed algorithm faster original quicksort helal shaheen enhanced ihmas algorithm parallel partitioning sorting algorithm using mpi bottleneck single point failure reduced compared ham algorithm mubarak proposed preprocessing technique run sorting algorithm insertion sort quicksort run using method time complexity proposed sorting algorithm reduced multi-deque partition dual-deque merge sorting algorithm sorting algorithm named multi-deque partition dual-deque merge sorting algorithm mpdmsort proposed section work comprises algorithm first multi-deque partition dual-deque merge sort function mpdmsort main function partitioning sorting shown algorithm median five function medianof5 algorithm selecting pivot algorithm initblocks function algorithm block initialization algorithm appends boundary block double-ended queue deque mppdmpar function algorithm parallel partitioning function called multi-deque partitioning phase dualdeqmerge dual-deque merging phase algorithm merging function used merge data mpdmpar function multi-deque partitioning phase begin selecting pivot divide data smaller subarrays median five algorithm pivot selection algorithm called line algorithm parallel partitioning function mpdmpar executed return new pivot position line algorithm mpdmsort called recursively divide conquer concept line algorithm parallel using omp task line algorithm median five function medianof5 line algorithm pivot selection function selects mid position calculating left right position subarray line algorithm position quarter third-quarter calculated using left mid right position line algorithm data left mid right sorted line algorithm finally mid position returned mpdmsort paper mpdmpar parallel partitioning algorithm paper begin swapping pivot left data subarray line algorithm initblocks function executed initial multiple block using double-ended queue deque blocksize size line algorithm note function return deq keep boundary block used partition data block hoare partitioning block executed using omp parallel line 5–6 algorithm every deq thread popped left right boundary critical section line 8–9 algorithm note left right boundary pop deq assigned temp temp respectively line algorithm moreover hoare partitioning algorithm block run parallel line 11–22 algorithm partitioned boundary pushed dual-deque first deque keep boundary data equal pivot line algorithm second keep boundary data greater pivot line algorithm passed dualdeqmerge function merge data without compare-and-swap operation line algorithm return leftover boundary run sequential partitioning line algorithm finally new\_pivot\ sequential partitioning data left position subarray swapped returned line 31–32 algorithm paper multideque data structure created parallel partitioning keep boundary block first number block calculated line 1–2 algorithm multideque array deq created thread length line algorithm boundary pushed deq line 5–8 algorithm note remaining block last boundary block pushed deq line 9–12 algorithm dual-deque merging phase previous phase show block-based parallel partitioning concept using multideque data structure keep block boundary provides data equal pivot greater pivot block therefore push boundary data equal pivot value greater pivot value deques respectively data merged phase without compare-and-swap operation deques keep boundary data multi-deque partitioning phase therefore boundary sorted first sorted merging data line 1–2 algorithm popped back popped front index used swap data equal pivot value right block array index used swap data greater pivot left block array data left right block swapped greater equal boundary block equal boundary block line 8–12 algorithm leftover data left block boundary left block pushed front line 13–15 algorithm hand right block boundary right block pushed back line 16–18 algorithm iteration run index equal return dltemp dgtemp run sequential partitioning function multi-deque partitioning phase dual-deque merging phase illustrated fig figure illustration multi-deque partitioning phase dual-deque merging phase full size image sorting phase parallel sorting algorithm divide conquer concept consists two part divide step parallel partitioning multi-deque partitioning dual-deque merging phase work data divided smaller cutoff sorting phase conquer executed parallel using omp task line 1–4 algorithm lomuto vs. hoare partitioning multi-deque partitioning phase previous phase show multi-deque partition dual-deque merge sorting algorithm multi-deque partitioning phase important phase hoare partitioning algorithm partition data block line 11–22 algorithm paper compare hoare lomuto partitioning algorithm multi-deque partitioning phase improve performance mpdmsort experiment result discussion section show experimental setup sorting algorithm compare result run time speedup speedup comparison lomuto hoare partitioning multi-deque partitioning phase comparison speedup per thread efficiency algorithm related sorting algorithm profile algorithm perf profiling tool experimental setup paper mpdmsort compared parallel balanced quicksort bqsort multiway merge sort mwsort stlsort algorithm datasets generated random nearly sorted reversed 32-bit 64-bit unsigned integer data size million data block size value multi-deque partitioning phase 0.5 cutoff value sorting phase mpdmsort bqsort mwsort stlsort executed computer one 16-core intel xeon gold processor main memory running ubuntu linux virtual machine set number core virtual machine core one 8-core intel i7-11700 processor main memory also running ubuntu linux result paper run time speedup speedup per thread perf profiling tool used measure performance metric algorithm run time table average run time block size uint32 random distribution intel xeon gold machine vs. i7-11700 machine cutoff full size table mpdmsort parallel block-based sorting algorithm thread run partitioning algorithm block therefore block size important parameter affect run time mpdmsort table show average run time block size random distribution intel gold machine vs. i7-11700 machine cutoff best sorting run time 0.5 sorting million data intel xeon gold machine data increased million value increased respectively hand value i7-11700 machine value increased increase similar intel xeon gold machine mpdmsort developed divide conquer algorithm concept therefore need switch divide part conquer part parameter used switch conquer part cutoff table show average run time cutoff random distribution intel xeon gold machine vs. i7-11700 machine table average run time cutoff uint32 random distribution intel xeon gold machine vs. i7-11700 machine full size table best run time value mpdmsort note cutoff million data intel xeon gold machine noticed run time smaller cutoff stable larger cutoff hand intel i7-11700 machine best run time value increased cutoff proportional table show average run time random reversed nearly sorted distribution sorting uint64 million data intel xeon gold machine cutoff bqsort fastest algorithm sorting random distribution million data however mpdmsort sort random data faster bqsort mwsort million data hand mwsort bqsort fastest sorting reversed nearly sorted distribution respectively mean mpdmsort sort larger random distribution data better sorting algorithm limitation mpdmsort first limitation sorting reversed nearly sorted distribution noticed run time bqsort best sorting nearly sorted distribution mwsort run time best reversed distribution dued multi-deque partitioning phase block-based partitioning concept hoare partitioning block however concept compare-and-swap operation block every level subarray consumes run time greater multiway-merge algorithm mwsort second limitation mpdmsort sorting small random distribution data notice run time bqsort best sorting smaller data million random data dued overhead sequential region mpdmsort example dual-deque merging phase critical section parallel region push pop operation deques moreover average run time two machine similar dued number core virtual machine intel xeon gold set core hardware thread equal intel core i7-11700 machine table average run time distribution sorting uint64 data intel xeon gold machine nsorted nearly sorted million cutoff full size table speedup figure speedup parallel sorting algorithm random intel xeon gold machine full size image paper measure run time metric algorithm calculate using run time stlsort run time mpdmsort bqsort mwsort figure show speedup parallel sorting algorithm random distribution intel xeon gold machine speedup metric algorithm proportional best speedup mpdmsort bqsort =2000 million data however best speedup mwsort =1000 million data speedup mpdmsort proportional input size due overhead openmp library fraction sequential parallel region parallel algorithm figure speedup cutoff mpdmsort sort random uint32 data intel xeon gold machine million full size image figure show speedup mpdmsort cutoff sort random uint32 data intel xeon gold machine notice best speedup small dataset shown fig cutoff increased cutoff shown fig figure show speedup mpdmsort cutoff =2000 million data 0.5 cutoff best speedup 13.42 cutoff noticed increased grows cutoff incresed =2000 million data cutoff =32 set parameter choosen sort data mpdmsort lomuto vs. hoare partitioning multi-deque partitioning result table show best speedup mpdmsort lomuto vs. hoare partitioning multi-deque partitioning phase note speedup lomuto partitioning algorithm greater hoare parameter due block size work algorithm block-based parallel partitioning concept every block small resident cache index lomuto partitioning increased run left right however hoare partitioning two index first index run left right second index run right left locality better lomuto partitioning algorithm table best speedup mpdmsort lomuto vs. hoare partitioning multi-deque partitioning result intel xeon gold machine full size table speedup per thread speedup per thread metric used measure performance parallel algorithm speedup per thread greater processor core used efficiently speedup per thread fraction speedup algorithm hardware thread processor use metric compare parallel algorithm metric greater 1.00 table best speedup per thread parallel sorting algorithm full size table table show best speedup per thread parallel sorting algorithm note mpdmsort bqsort mwsort run machine experiment note speedup per thread mpdmsort_ lomuto mpdmsort_ hoare greater others speedup per thread parallel sorting algorithm table bqsort 0.78 mwsort 0.72 multisort 0.43 psort 0.46 introqsort 0.74 ppmqsort 0.77 hdpsort 0.31 cpp sort 0.79 dppsort_ stl 0.74 smaller mpdmsort_ lomuto mpdmsort_ hoare metric show performance parallel partitioning algorithm block-based concept merging algorithm without compare-and-swap operation mpdmsort_ lomuto block-based partitioning concept multi-deque partitioning phase implement lomuto partitioning inside improves locality partitioning algorithm executes parallel technique used algorithm high speedup per thread metric bqsort introqsort ppmqsort cpp sort dppsort_ stl note ppmqsort dppsort_ stl begin block parallel partitioning phase moreover block-based partitioninig algorithm merge unpartitioned data moving middle partitioning sequential paralell consumes compare-and-swap operation affect run time however mpdmsort_ lomuto dual-deque merging phase merge partitioned data block reduces compare-and-swap operation therefore speedup per thread mpdmsort_ lomuto greater algorithm perf profiling tool perf profiling tool linux tool profile metric affect performance sorting algorithm mpdmsort_ lomuto mpdmsort_ hoare bqsort mwsort run sort data profile metric table show perf result four parallel algorithm intel i7-11700 machine table perf result mpdmsort_ lomuto mpdmsort_ hoare bqsort mwsort intel i7-11700 machine million uint64 data full size table experiment increase show effect block size algorithm note cutoff value set important metric affect run time parallel sorting algorithm branch load miss cache miss note proportional cache miss increased cache miss increased moreover cutoff proportional branch load miss value cutoff value increased branch load miss value increased conclusion paper multi-deque partition dual-deque merge sorting algorithm parallel block-based sorting algorithm shared-memory system proposed concept mpdmsort partition multi-deque partitioning phase hoare lomuto partitioning compared phase found lomuto partitioning faster hoare partitioning algorithm partitioning result merged dual-deque merging phase dual-deque merging phase main contribution work reduces compare-and-swap operation solve problem parallel block-based partitioning parallel algorithm executes recursively data smaller cutoff parameter finally partitioned data sorted independently using stlsort sequential standard sorting function mpdmsort implemented executed computer one intel xeon gold processor running ubuntu linux intel core i7-11700 processor also running ubuntu linux mpdmsort run time faster bqsort mwsort speedup 13.81 speedup per thread 0.86 obtained sorting random distribution data speedup per thread mpdmsort greater paralell sorting algorithm speedup mpdmsort depends block size cutoff data size type distribution important metric affect performance parallel sorting algorithm cache miss proportional branch load miss proportional cutoff method used merge data paralell algorithm block-based concept