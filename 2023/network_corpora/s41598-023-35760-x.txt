introduction expected world population live urban environment many city set become megacities hence also driven internet thing iot revolution explosion amount available data many government local authority adopted process adopting smart city concept tackle key challenge related growing intensive urbanization result much research development effort currently devoted design iot data-driven service goal making city sustainable capable improving quality life citizen subsequent societal economic environmental impact design advanced transportation system central achieve goal exciting opportunity offered possibility designing deploying service leveraging increasing pervasiveness connected car i.e. vehicle capable accessing internet communicating device car vehicle vehicle and/or vehicle infrastructure communication context propose principled design data-driven service based crowdsourcing routing connected car crawling crowdsourcing algorithm wheel smart parking connected car equipped crawling able crowdsource skills/services need order fulfill given routing task service also designed allow car equipped crawling gather data source car pedestrian smart sensor social medium result vehicle equipped crawling become active part sharing economy ecosystem vehicle share create skill used within service key feature service built around framework intrinsically allows consider stochastic behavior thus explicitly accounting user stochasticity e.g. capture privacy requirement specifically crawling exploit recent data-driven control algorithm return randomized behavior car i.e. probability function solving sequential decision-making problem formalizes tracking desired behavior expressed probabilistic term service systematically minimizes cost function consisting reward capturing road/traffic condition regularizer bias solution towards target behavior allowing crawling keep account possible preference passenger related work crawling tailored towards generic routing problem concreteness focus problem routing car find parking space smart parking allocation attracting much research attention roaming parking known major source pollution traffic user stress broader context lack coordination transportation system believed correlated increase circulating vehicle reducing parking-related traffic question interest context mitigate context parking management urban sensor used monitor availability parking space proposal use sensor automatically detect parking availability provide automated booking/charging service effort leverage user data broad context smart city also focus much attention example energy taxi demand prediction congestion analysis parking application key challenge becomes designing algorithm able optimally route flow vehicle leveraging data currently many algorithm rely deterministic decision-making example method solving multi-depot vehicle routing frame problem via deterministic optimization using binary decision variable hand use stochastic framework gaining traction literature advanced intelligent transportation system example context differential privacy privacy indeed key requirement application privacy achieved injecting noise system driver pedestrian intent prediction probabilistic methods/models long history mobility estimation/prediction among feature model account user stochasticity uncertain non-optimal behavior recall probabilistic model human mobility stochastic filter vehicle behavior estimation prediction behavioral model inferred learning effort also made derive probabilistic traffic model example using bayesian network physically-inspired flow model based pdes effort often focus modelling and/or artificial intelligence method specialized stochastic optimization framework also arisen example parking assignment tool stochastic optimal control leveraged manage parking stochastic parking assignment shown potential outperform deterministic method relation work envision stochastic energy pricing strategy parked electrical vehicle controlling parking occupancy entry price determined solving stochastic optimization problem also stream literature design service run real time orchestration heterogeneous data identified key challenge context decision engine recently designed enable agent make decision merging stream available data engine leverage probabilistic framework also used paper also applied parking management finally data-driven intelligent transportation system data-driven analysis also gained traction although heterogeneous datasets emerging different information stream need merged singled challenge example one stream social medium monitoring recently used identify trend related traffic obstruction monitor traffic real time key contribution paper summarized follows introducing smart parking problem data-driven control problem propose principled design crawling present stand-alone general-purpose modular architecture service made openly available http architecture propose built gather online data environment car equipped crawling certain social medium moreover service provably return optimal behavior car equipped evaluate computation time discus suitable routing application also show via simulation leveraging microscopic traffic simulator sumo effectiveness crawling orchestrating use parking space university campus different operating condition larger city center scenario simulation show crawling effectively directs connected car confirming vehicle equipped service improve average time-to-parking avoiding unfavourable area map reacting online environmental change reported one scenario via social medium supporting code openly available providing two version architecture differing way service interacts social medium built modular facilitates researcher build crawling allows user replace component service performance different part assessed benchmarked example architecture make available allows embed different decision engine crawling recent decision-making algorithm data composition context highlight social medium dimension crawling architecture validation including city-wide scenario specific contribution paper paper organized follows material method begin introducing data-driven control framework exploited crawling subsequently describing design architecture scenario used ass performance result report result obtained service first evaluating computational efficiency discussing performance obtained reference scenario specifically chosen validate key feature service finally give concluding remark discus relevance result section table notation table full size table notation note set road link lane follows time discrete time step connected car occupies link _k\in probability connected car going k-1 _k\ i.e. car turning probability denoted _k|\textbf k-1 car acces number service source -th service/source provides turning probability denoted _k|\textbf k-1 target behavior car represents behavior passenger would like track absence road environmental disruption denoted k-1 finally reward obtained car time denoted r_k shall see reward used service capture road/environmental disruption might known vehicle passenger also denote _n|\textbf _n|\textbf product transition probability _k|\textbf k-1 k-1 respectively joint probability function clearly depend initial condition car _0\ i.e starting link/lane trip also let expectation sum taken support probability function kullback-leibler divergence respect absolutely continuous respect measure proximity pair pmfs specifically divergence non-negative zero use notation k_1 k_2\ denote set integer integer k_1\ k_2\ included consequently w_k\ k_1 k_2 denotes set k_1 k_2 comprehensive summary notation/symbols used throughout paper refer table figure crawling functional architecture interaction environment crawling in-car service consists decision-making algorithm cost module sampling mechanism component compute route car take based environmental data available service full size image material method introduce crawling first present algorithm section crawling description service discus implementation section making crawling architecture openly available implementation validation set-up reference scenario used ass performance section scenario description key functional component crawling interaction surrounding road environment schematically illustrated fig shown figure crawling in-car service gather online data environment feed suitably defined cost function number source service simply source follows route car source e.g. specialized routing service well direction collected car area also equipped crawling based cost available source crawling dynamically determines next direction car take done via decision-making algorithm exploit recent result context data-driven control algorithm return probability function i.e. policy capturing turning probability car next road link car take obtained sampling form policy/turning probability crawling description service crawling seek determine optimal turning probability say _k|\textbf k-1 car orchestrating use set available source goal track target behavior car say _k|\textbf k-1 simultaneously maximizing car-specific reward r_k target behavior used capture preferred set direction car passenger computed e.g. historical data road condition trip captured car-specific reward r_k within service reward signal used capture data included target behavior typically related state network including hazardous condition traffic roadworks data gathered network urban sensor scenario section scenario description reward also fed interaction social medium see section making crawling architecture openly available implementation validation set-up scenario 1.\text section scenario description example simulation section result component reward favour road link adjacent available parking space encouraging agent park structure allows reward encompass specification linked various task meaning crawling per limited parking management describe service first introducing underlying optimal control problem presenting optimal solution finally introducing decision-making algorithm refer table notation say number source available car i.e. _k|\textbf k-1 i=1 see section notation definition turning probability assumed _k\mid k-1 _k\mid k-1 +\infty\ standing assumption service shown non-restrictive practice shall see turning probability source input crawling algorithm hence upon receiving algorithm use pmfs satisfy assumption given set-up problem tackled crawling determine optimal route car formalized leveraging optimal control formulation problem let positive integer k-1 _k\mid k-1 r_k prior initial condition find sequence weight _k^ _k^ _k^ -dimensional vector time step solving aligned _k\right\ min _n|\textbf _n|\textbf k=1 ^n\mathbb k-1 k-1 s.t. k-1 i\in _k^ k-1 i\in _k^ _k^ aligned problem cost function formalizes fact goal crawling track target behavior maximizing car-specific reward constraint capture fact solution problem probability function turn probability function determined picking one source available crawling optimal solution problem shown following form aligned k-1 i\in _k^ k-1 aligned _k^ weight vector zero except one element say j_k\ equal specifically j_k\ computed aligned j_k i\in arg min k-1 k-1 k-1 aligned obtained via backward recursion aligned r_k =\underset min k+1 k+1 k+1 k+1 k+1 aligned refer prior work full derivation detailed statement technical result derivation allow explicitly compute optimal solution problem implemented via algorithm algorithm embeds cost algorithm component service fig key macro-steps algorithm output optimal solution problem described next input algorithm line 1–6 besides reward source time horizon current state agent k-1 target behavior optional input parameter indeed provided crawling set uniform distribution line 7–9 note happens first term cost problem becomes entropic regularizer also widely used literature reinforcement learning output algorithm line 10–11 optimal turning probability throughout time horizon essentially plan car follow following initialization phase loop computes reward-to-go car computed cost module fig represents promising given direction plan car reward-to-go computed via backward recursion start last time step time horizon intuitively time horizon measure far future crawling look make decision see section computational performance corresponding computational aspect specifically algorithm reward signal r_k received crawling updated information future time step signal obtained via backward recursion cost source policy calculated line 17–18 source incurring smallest cost selected giving car turning probabilities—this returned line finally next link car need take sampled see sampling component illustrated fig turning probability reporting implementation crawling also highlight benefit computing using input probability function first source used crawling intrinsically stochastic useful agent generating data want e.g guarantee desired level differential privacy privacy mechanism consists corrupting information sent source typically laplacian noise hence captured source laplacian probability function moreover algorithm doe determine next state car rather probability function aspect used guarantee level privacy driver using crawling making possible privately share policy become source vehicle equipped crawling determine next direction sampling probability making crawling architecture openly available implementation validation set-up discus proposed implementation architecture crawling code found http key functional component validation set-up illustrated fig shown figure validate service via microscopic traffic simulator sumo serf environment real map imported traffic demand generated crawling interacts interaction sumo happen via python interface traci used gather environmental data sumo control vehicle based direction provided algorithm moreover social interface module give crawling possibility interacting certain social medium scenario section scenario description twitter set-up propose done using python library request used interface twitter api figure crawling validation set-up crawling implemented python interacts sumo provides back-end simulation crawling gather relevant data traci direction obtained via algorithm fed back simulation environment via interface traci example validation scenario described section scenario description crawling receives data parking availability obstructed road link used compute direction connected car equipped service crawling also interface via social interface module information social medium scenario 1.c twitter full size image crawling implementation discrete time step uniform rather associated vehicle changing link i.e. vehicle transition state design solution remove need car synchronized clock algorithm implemented via receding horizon strategy thus allowing handle possible change environment specifically every time say t-1\ given car equipped crawling transition new link algorithm gather available data source setting fig build reward based new information might become available transition new link computes optimal plan action next link according algorithm determines next direction sampling t-1 car controlled traci setting direction obtained sampling code see gitub repository detail connected car encoded agent python class contains information user goal i.e. route/destination driver vehicle would like follow/attain algorithm used crawling also python class take agent argument i.e. vehicle class regroups method used algorithm namely computation divergence receding horizon control loop sampling mechanism simulation file also provided manage key interface agent crawling simulator used ass performance i.e sumo specifically simulation file includes function updating state crawling vehicle simulation updating reward performing simulation step sumo-python interface traci simulation file scenario 1.\text 1.\text see section scenario description also log result simulation simulation file scenario 1.\text see section scenario description contains necessary code interface crawling social medium namely twitter mechanism crawling implemented obstruction encountered connected car access twitter api automatically share information specific user account one author case content date tweet shared way also stored within service car equipped crawling parse message get access shared information tweet parsed code hashtag sumo_experiment considered parsing case function split string individual word search word blocked leave design refined parser future research road link identifier date tweet examined ensure tweet impact current trip tweet posted current date ignored finally condition met blocked road link assigned negative reward described section result note current version architecture tweet stored within service due recent change twitter api policy prevents automated retrieval user tweet however github also provide legacy version allows retrieve tweet using former version api decided make openly available version facilitate researcher wishing build crawling example implementation urban setting envision crawling could retrieve information shared traffic authority e.g. social medium context architecture provides necessary modular component implement service figure campus road network highway parking lot ate represented respective international symbol full size image scenario description describe scenario scenario 1.\text 1.\text 1.\text scenario follows used validate crawling specifically scenario centered around management fleet car entering university salerno campus seeking park consider different condition interest within university campus scenario split three sub-scenarios including experiment aimed verifying crawling social medium interface would perform spotting closure scenario take place larger road network city center salerno scenario 1.a scenario simulates morning rush hour campus university salerno campus university salerno shown fig served two highway exit three parking lot simulation parking lot accommodate car highway exit corresponding campus entrance referred southern northern entrance parking lot multipiano terminal biblioteca parking lot see fig position parking lot campus map scenario fleet car i.e. maximum number car accommodated simulation arrives campus teaching begin student faculty staff searching parking space particular car arrive northern highway exit seek park either terminal biblioteca remaining car arrive south reach multipiano parking lot car arrive campus one one 15-second interval order arrival shuffled car arrives destination campus whether equipped crawling randomly selected car arrive campus roadworks carried main ramp leading northern highway exit campus rendering traffic corresponding link highlighted blue fig difficult vehicle using link speed restricted one kilometer per hour ramp also corresponds preferred route uncontrolled car car equipped crawling seek park terminal section result use scenario benchmark effectiveness crawling properly managing flow car simulation varying amount controlled car performed quantify performance scenario 1.b scenario also take place university campus however considers different situation parking location already saturated incoming car e.g. late morning arrival need park upon arrival specifically accessible terminal biblioteca parking lot full early morning user parked upon arriving given scenario consider fleet car need parked within university campus attempted park terminal multipiano accommodate car parking location able accommodate new car also road link path two parking lot obstructed see fig figure setup scenario 1.\text blue arrow show road link car starting leaving terminal orange arrow show obstructed link color online full size image scenario 1.c scenario consider fleet car entering campus northern highway exit 10-second interval aim car equipped crawling reach either terminal biblioteca parking within scenario ramp leading directly highway exit parking lot closed specifically first car pass exit ramp shut completely information shared twitter crawling car equipped crawling parse message service assigns highly negative reward reportedly obstructed link incoming vehicle equipped service re-routed avoid obstruction scenario scenario deploy crawling larger map city center salerno emulating situation typical e.g. christmas period artistic light attract large number tourist road congested area also stressed large parking demand parking lot located around harbor edge city car enter residential area high-capacity road coming neighboring suburban area generated traffic demand simulate car entering city center area typically crowded concreteness create two point car generated point car seek park one city parking cluster total city center area parking lot accommodating car parking lot distributed within parking cluster one located outside city center additionally simulated obstructing link severe congestion central part city within scenario verify larger map crawling allows car bypass obstruction routing effectively find suitable parking location see fig detail figure salerno city center setup scenario red arrow indicate parking lot cluster blue arrow indicate starting position car orange arrow indicate obstruction color online full size image result describe result obtained crawling two scenario section scenario description first empirically investigate computational load incurred crawling discus design choice make algorithm suitable routing application describe main setting simulation framework code accessed http note replicate simulation working installation sumo traci tweepy main scientific computing python library required along twitter account developer access computational performance make crawling suitable in-car operation leverage fact car given link i.e. state k-1 transition outgoing link link set outgoing neighbor k-1 mean support pfs k-1 k-1 k-1 restricted outgoing neighboring link k-1 see table reminder notation hence neighbor k-1 need considered computation algorithm thus algorithm implementation set outgoing neighbor associated current link car determined computation subsequently performed neighborhood depends time horizon rather full state space would amount full map using approach empirically investigated service fast enough in-car application running crawling link university campus map fig logging average running time map road link connected average link repeated simulation varying across amount data source available decision-maker i.e. gradually increased time horizon i.e. gradually increased result summarized fig leftward panel figure illustrates computation time linear respect number source fig rightward panel due fact algorithm iterates per source time step also computation time approximately exponential respect time horizon fig middle panel aspect essentially due exponential increase state space even reduced described time horizon increase interestingly fig show crawling computation time typical whole-link travel time thus confirming suitability implementation measurement done standard desktop computer intel core i7-2600 cpu 8gb ram used python 3.11.4 sumo 1.17 traci 1.17 figure crawling execution time function available source time horizon leftward panel computation time second function time horizon number service middle panel computation time second function time horizon available source rightward panel computation time second function amount source time horizon step ahead full size image simulation setting report setting used implement scenario section scenario description obtain result section result scenario setting parameter set running simulation follows simply say vehicle equipped crawling controlled vehicle without service uncontrolled first created list containing starting point target parking lot uncontrolled vehicle target behavior controlled vehicle list shuffled randomize departing order vehicle simulation simulation involving controlled uncontrolled vehicle index controlled uncontrolled vehicle randomly assigned information stored .npy file namely scenario file agent.npy foe.npy contain information file generated simulation avoid biased result done using notebook simulation launcher.ipynb relevant map imported openstreetmap http using netconvert software cleaned using netedit full tutorial procedure found sumo online documentation beginning simulation sumo load map traci add car npy file simulation source stored numpy array loaded crawling launched sumo run simulation information including vehicle data network condition obtained traci transmitted crawling build reward car setting car implemented traci agent controlled car query crawling direction time transition new link uncontrolled car assigned pre-defined trajectory beginning simulation trajectory determined built-in sumo routing function determines shortest path destination uncontrolled car set automatically park end course possible hand controlled car assigned parking space arrive non-full parking lot parking lot full controlled uncontrolled car rerouted assigning new non-full parking lot uncontrolled car done assigning new destination sumo controlled agent assigned new target behavior figure northern section campus obstruction highlighted blue scenario map imported openstreetmap sumo via netconvert tool full size image result describe simulation specific report result reward behavior setting reward encompasses environmental disruption use-case computed state road link related availability parking space specifically time step link adjacent parking lot assigned reward parking lot vacant space -10\ road link traffic perturbed assigned additional negative reward -20\ traffic heavily slowed link simulated scenario 1.\text 1.\text enforcing speed limit one kilometer per hour perturbed road link -100\ road link blocked altogether scenario 1.\text running simulation set source compiled using sumo routing function source designed represent direction leading different point network simulation scenario build source using highway exit parking lot north-western side campus destination ensures directory behavior available decision-maker provides wide coverage direction lane road link probability function _k\mid k-1 source built assigning high probability lane indicated routing neighbor link small uniform probability selected also built last source merging behavior car routed towards biblioteca terminal parking lot source thought emulating trace previous vehicle navigated campus following target behavior connected car selected among source scenario build source parking lot destination probability function source npy format provided github scenario 1.a specific first set simulation follows first scenario outlined section scenario description implemented scenario simulating car arriving campus 15-second interval simulation lasting approximately one hour twenty minute simulated time seeking park car entering campus via southern exit directed towards multipiano parking lot uncontrolled car entering northern exit seek park terminal parking lot hand target behavior controlled car entering northern exit lead either biblioteca terminal interpreted target behavior built trace previous crawling car similar goal highlighting interest obtaining direction crowdsourcing stochastic policy however road leading northern entrance roundabout immediately east obstructed causing traffic significantly slow described speed limit road link reduced one kilometer per hour specified section scenario description obstruction occurs preferred route uncontrolled car directed towards terminal uncontrolled car within car entering northern highway exit illustrated fig capture section full campus map obstruction originate road work model limited capacity road link related e.g severe climatic condition result shown next run different set simulation controlled car done evaluate penetration rate service showing effectiveness number car equipped crawling increase result scenario 1.a shown fig fully uncontrolled fleet vehicle equipped crawling fails park every agent allocated time indeed uncontrolled car arriving northern highway exit routed obstructed lane hand fleet fully controlled vehicle equipped service crawling need approximately half duration simulation park every car namely crawling allows controlled car adapt route avoid obstruction effectively orchestrating use available parking space specifically observed connected car entering northern exit routed biblioteca parking lot became full happened crawling rerouted remaining car terminal parking lot detour route avoiding obstructed road link controlled uncontrolled car entering southern highway exit reach multipiano parking lot closest complement analysis also recorded average time spent average car obstructed link average time-to-parking simulation shown table together result welch t-test used verify statistical significance simulation test aimed checking whether two random sample originate distribution different mean word value 0.05 would mean set simulation statistically insignificant need rejected specifically use value compare average parking time obtained five first simulation performed set parameter five last simulation following parameter table confirms qualitative behavior shown fig particular increase number car equipped crawling decrease time spent obstruction time-to-parking due fact car controlled via crawling able coordinate avoid unfavorable road link directed towards parking space effective capacity accommodate incoming car figure confidence interval plot simulation result scenario 1.a solid line represent mean value shaded area standard deviation fully controlled fleet manage fully park within half simulation time fleet controlled car take longer failing find parking space every car simulation end extreme case note fleet one third car using crawling still significantly outperform baseline uncontrolled car full size image table summary table numerical experiment time second full size table scenario 1.b specific implemented scenario see section scenario description generating within simulation car exit road link leaving terminal see fig 5-second interval terminal biblioteca full fleet target multipiano link fleet preferred route see fig obstructed performed two set simulation one fleet car equipped crawling car equipped crawling result scenario 1.b shown fig car equipped crawling find parking within simulation time doe happen car equipped service observed behavior due car equipped crawling able circumvent obstruction via alternative itinerary specifically detour car return preferred route arriving destination parking faster counterpart figure confidence interval plot simulation result scenario 1.b solid line represent mean value shaded area standard deviation fleet equipped crawling manages avoid obstruction car service spend high amount time navigating obstructed link full size image scenario 1.c specific scenario 1.\text half car seek park terminal half biblioteca however first car exit highway exit ramp driving blocked car link tweet automatically sent crawling twitter api specifically north highway ramp blocked sumo_experiment automatically posted crawling scenario via one author twitter account content tweet also stored crawling car equipped service parse see section making crawling architecture openly available implementation validation set-up time step parsing mechanism detects obstruction crawling assigns negative i.e. -100\ reward road link disrupting event signalled result scenario 1.c result summarized fig figure illustrates panel key campus area scenario beginning scenario road obstruction detected indeed shown panel first car entering simulation normally transition northern exit following shortest path ramp car pass ramp road obstruction occurs obstructed link highlighted blue panel obstruction reported via tweet experiment posted one author account see panel panel showcase corresponding tweet issued upon detection road blocking panel show result crawling adapting new information indeed route following car re-computed service prevent following car entering obstructed road link result crawling detecting reward change due tweet interesting question determine measure trust tweet used crawling leave topic future research end simulation—panel —rerouted car achieve goal reaching parking space video corresponding simulation also available http figure snapshot simulation scenario panel area campus interested use-case red rectangle denote area panel panel first car taking fastest route northern entrance obstruction panel route blocked causing first car slowly proceed obstruction panel information obstruction shared via tweet panel crawling adapts disruption following car use alternate route panel car reach destination bypassing obstruction full size image scenario specific car enter simulation 5-second interval car departing time place mixed simulation whether equipped crawling randomly shuffled scenario 1.\text car generated western starting position seek reach parking cluster car generated east seek reach cluster see fig detail obstructed road link also shown fig link maximum speed restricted one kilometer per hour obstruction preferred route car performed simulation fleet containing car equipped crawling benchmark service investigate penetration rate larger scenario result scenario vehicle equipped crawling fleet fails park allocated time instead car equipped crawling adapt route avoid obstruction effectively find parking simulation showed fleet car equipped crawling achieves goal significantly faster fleet car service see fig similarly scenario 1.\text crawling also able redirect car initially driving towards parking lot became full change condition captured reward informs in-car system online decision-making interestingly result illustrated figure consistent obtained within smaller scenario 1.a turn showing suitability crawling handle larger-scale scenario figure confidence interval plot result scenario solid line represent mean value shaded area standard deviation fully connected fleet reach target parking lot significantly faster non-connected counterpart legend show set simulation many car within fleet equipped crawling full size image discussion concluding remark presented principled design crawling in-car service smart parking make code available service leverage recent data-driven optimal control algorithm cost function kullback-leibler divergence component ensuring car track certain target behavior i.e route user would like take reward signal also incorporated cost compiling additional information might collected network urban sensor social medium key feature service determines turning probability car hence policy computed service stochastic allows embed framework possibility driver follow indication provided crawling guarantee desired level e.g. differential privacy user participating service describing key functional component crawling proposed stand-alone general-purpose modular architecture service introduced component architecture simulation framework used investigate service effectiveness different smart city scenario leveraging sumo microscopic traffic simulation first scenario morning rush investigated happens number vehicle equipped crawling increase empirically finding parking time considerably improved even 30\ vehicle controlled service simulation also performed limited amount source providing encouraging insight system ability efficiently make decision based limited set available service result confirmed second fourth scenario crawling significantly speeding fleet search parking space different operating condition thus illustrating crawling suitable operation various network different condition third validation scenario investigated effectiveness crawling adapt environmental change via social medium simulation confirmed benefit equipping car service broader context number consideration drawn finding concreteness tailored crawling towards parking management approach exported routing application see finding first step implement internet skill connected car framework envisage car collaboratively exchange learned skill create collective intelligence enabling car augment others ability crowdsourcing also note venture already started delivering service based data collaboratively shared user see example waze application interestingly similar mechanism based crowdsourcing found neuroscience—see example recent thousand brain theory postulate neocortex brain doe compute brand new behavioral model patch simpler model cortical column finally context reinforcement learning mechanism related crawling recently proposed orchestrate use learning-based model-based policy tackle certain control task interestingly shown mechanism orchestrating heterogeneous policy designed tutor turn improves learning efficiency performance inspired study possible future direction research might involve embedding tutoring mechanism crawling exploring link approach presented certain recent neuroscience theory another point interest embed architecture recently developed decision-making engine allows agent merge behavior tested simplified scenario without social medium component therefore plan ass performance crawling different decision-making engine used also embed strategy filter social medium information effective use crawling finally aim investigating whether crawling represent effective mechanism fairly regulate possible competitive behavior vehicle equipped service legacy manually-driven vehicle compete limited resource