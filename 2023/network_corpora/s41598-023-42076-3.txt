introduction software refactoring well-known practice used improve quality software system refactoring involves making change code structure without affecting system functionality essential software engineer refactor code ensure remains maintainable scalable reusable recently contemporary refactoring tool advancing rapidly widely utilized several large project consequently vast amount information available past refactoring activity effect source code however multiple refactoring performed simultaneously becomes increasingly challenging analyze impact researcher propose use visualization tool refactoring improve code comprehension make easier developer navigate complex codebases visualization essential tool software engineer understand impact code change visualizing refactoring especially helpful new developer unfamiliar codebase refactoring visualization vital developer allows understand structure code additionally visualization aid developer detecting potential code issue violate design principle pinpointing code path vulnerable bug ultimately reducing time required development process despite increasing interest visualizing code modification software engineering research limited research visualizing refactoring process several software tool developed support refactoring lack effective visualization aid developer understanding impact change paper propose novel approach visualize software refactoring using radar chart radar chart also known spider chart web chart used visualize impact refactoring multiple dimension codebase simultaneously type chart useful developer want compare relative strength weakness different aspect code refactoring example radar chart could used compare complexity maintainability test coverage code smell code refactoring chart would show dimension separate axis chart line connecting data point refactoring state would allow showing immediately aspect code improved area may still need additional attention approach called radar chart refactoring visualization rcrv visualizes refactoring source code across multiple release approach present refactoring ring allows easy tracking trend refactoring across multiple method class graph produced offer condensed view refactoring progression facilitating examination prior action forecasting future direction approach used analyze four case past behavior related multiple refactoring method class release follows case visualization multiple refactoring multiple method one specific class refactoring counter case visualization one refactoring type multiple method multiple class refactoring counter case visualization multiple refactoring multiple class refactoring counter case visualization multiple refactoring evolution refactoring counter proposed visualization approach refactoring using radar chart good choice refactoring project multiple dimension code need improved important see improvement dimension relate motivation behind research stem desire increase utilization automated refactoring tool improve developer proficiency automated refactoring practice proposed tool aim empower developer providing visualization approach provides clear comprehensive understanding refactoring process enabling make informed decision optimize codebase effectively radar chart visually appealing straightforward method explored context best knowledge previous research visualizes software refactoring using radar chart additionally proposed tool empirically evaluated developer evaluate usefulness visualization tool considered useful developer appealing easy use rest paper organized follows section background provides research background section related work review literature related work section research method present research method section rcrv approach visualization result introduces proposed approach discus generated graph finally section evaluation refactoring visualization tool concludes study section implication outline limitation future work background refactoring process improving quality existing code making modification structure design implementation without altering external behavior functionality primary goal refactoring improve code readability maintainability extensibility reducing complexity eliminating code smell software engineering code refactoring essential technique used optimize maintain software system continuously improving code quality refactoring reduces technical debt help developer add new feature fix bug efficiently additionally refactoring also lead better software design better performance increased code reuse common refactoring technique include simplifying code removing duplication improving naming convention applying design pattern refactoring typically done small incremental step change tested ensure code behavior remains unchanged refactoring often ongoing process occurs throughout software development lifecycle code evolves requirement change observing progress large software system particularly object-oriented project present challenge due vastness complicated increased amount data analyzed every release examined software metric visualization two useful technique used track refactoring software metric complexity metric provide condensed information source code data huge table challenging interpret new metric often questionable usability fuzzy definition software refactoring visualization technique used visualize structure code refactoring process goal visualization provide better understanding codebase help identify area need improvement visualizing code developer easily see different piece code connected change one area affect rest system many tool available visualizing software refactoring tool generate diagram show relationship class method code element diagram help developer understand overall structure codebase identify area may overly complex tightly coupled tool provide real-time feedback effect code change example developer make change codebase tool may highlight area impacted change help developer avoid introducing new bug issue refactoring process visualization tool also help code comprehension provide intuitive way navigate understand complex codebases especially helpful new team member yet familiar codebase overall software refactoring visualization powerful technique help developer improve quality codebases reduce technical debt providing better understanding code developer make informed decision refactor improve software software refactoring polymetric visualization implemented whereby node correspond module width determined number class contain height number file contain color number directory contain however dealing extensive graph numerous release identifying disparity pattern metric node arc becomes intricate unfeasible radar chart efficient visualization technique used software refactoring help identify improve design software system radar chart also known spider chart star chart graphical representation data show multiple variable plotted circular grid variable represented axis emanates center chart radar chart refactoring used analyze design software system plotting different software metric radar chart metric include code complexity code coupling test coverage quality metric radar chart used identify area system may need refactoring improvement example chart show particular module software high code complexity low test coverage high coupling module may indicate module need refactored improve maintainability reliability radar chart refactoring useful tool software engineer gain insight design complex software system identify area improvement related work maintaining good design crucial software development previously noted refactoring technique enables developer enhance design software system without altering behavior development process refactoring enhances system higher-level view implementation design-oriented enhancement including reorganization restructuring field method class process also improves code readability potential modification motivation behind modification lie enhancement static metric quality aspect like coupling cohesion complexity well elimination code smell refactoring executed either manually automation software system expand process manual refactoring escalates complexity manual refactoring time-consuming challenging developer lack experience familiarity codebase moreover subjective nature potential error escalate challenge result automated refactoring received substantial attention address intricacy posed growing software complexity response research dedicated automating refactoring process leading development various tool framework resource specifically designed provide developer automated assistance recommendation executing refactoring operation thereby mitigating complexity associated evolving software system jdeodorant truerefactor eclipse refactoring example popular tool utilized software engineering community tool automatically identify design antipatterns provide diverse range potential corrective refactoring subsequently developer select suitable refactoring task align design preference automated approach help identify opportunity refactoring hold potential enhance refactoring efficiency significantly accurately despite advantage developer exhibited lower adoption rate refactoring tool anticipated developer express concern regarding extensive alteration tool introduce current design hesitance arises fact developer seek optimize codebase also desire retain familiarity existing design consequently researcher encounter challenging task enhancing accuracy automation refactoring concurrently improving adoption automation tool address issue low adoption automated refactoring tool researcher suggest use visualization tool software refactoring aid code comprehension offering natural intuitive way navigate comprehend complex codebases particularly useful new developer yet acquainted codebase despite growing interest visualizing code modification software engineering research comparatively little research visualizing act refactoring overview related work field visualization software refactoring along brief discussion limitation existing visualization technique presented follows pinzger research introduces relvis visualization method aim create succinct comprehensive graphical representation source code release history data release approach employ kiviat diagram showcase metric source code element interconnection annual ring diagram emphasize instance positive negative performance element facilitating identification critical trend entity relationship knowledge prove useful identifying area code necessitate refactoring development system paper also includes contextual information assessment method effectiveness utilizing substantial open-source software project identifying type refactoring occurred two program version studied kim introduced eclipse plug-in called ref-finder template-based approach identify complex refactoring two program version represents refactoring type using template logic rule ref-finder utilizes logic programming engine infer specific refactoring instance tool support type refactoring comparison tool providing comprehensive coverage another study conducted present framework visualization approach help software maintainer locate comprehend bad smell code eliminated refactoring visualization method involves displaying object-oriented code element highlighting existing bad smell specifically proposed visualization depicts class building bad smell represented letter avatar based initial avatar shown warning sign corresponding building result study indicate visualization reduce time required maintainer comprehend bad smell study rodriguez introduced web-based tool called vizsoc help software developer identify refactoring opportunity service-oriented application tool take web service description language wsdl document input detects anti-patterns suggests way resolve providing list refactoring suggestion start refactoring process hierarchical edge bundle heb visualization technique used evaluated using two real-life case study measuring number anti-patterns detected performance clustering algorithm based internal validity criterion finding indicate vizsoc useful tool detecting refactoring opportunity enabling developer reduce effort required detection process research presented cassell used clustering technique solve challenge faced developer trying reallocate member large complex object-oriented class author introduced extc visualizer tool help programmer understand class structure emphasizing critical feature member interrelationship visualizing clustering algorithm group member proposed tool aid developer selecting appropriate technique refactoring large class bogart claimed developer may trust automated refactoring tool proposed visualization approach help developer understand suggested operation increase familiarity automated refactoring tool approach manually validated option experimentation identified visualizing software refactoring complex task involves representing code change way easy developer understand use overall progress visualizing software refactoring still many challenge limitation need addressed make visualization useful developer practice challenge limitation existing research visualizing software refactoring include difficulty interpreting complex refactoring refactoring complex others difficult represent visually way easy developer understand limit usefulness visualization complex refactoring task lack standardization complexity code limited scope existing technique lack integration development tool difficulty evaluating effectiveness challenge need addressed make visualization software refactoring useful developer practice primary goal research support developer becoming comfortable confident interactive familiar automated refactoring visualization approach would extend complement functionality existing automated visualization tool visualizing refactoring evolution software system facilitating analysis historical trend prediction future direction identifying potential refactoring candidate system evolution existing study contributes software engineering field proposing visualization approach introduces possibility visualizing multiple refactoring operation contrast conventional practice attempt sequentially visualize refactoring without comprehensive plan proposed approach aim minimize human effort required dealing automated refactoring tool optimize software system moreover best knowledge previous research employed radar chart visualize software refactoring radar chart visually appealing straightforward method explored context next section proposed radar chart refactoring visualization rcrv approach discussed research method construct rcrv visualization tool procured refactoring data serf input tool refactoring data sourced evolutionary data encompasses modification made software system period time refactoring data obtained evolutionary data using refactoring identification tool ref-finder subsequently utilized refactoring data input rcrv approach generate visualization radar chart visualizer plotly library python employed generate visualization refactoring data detail implementation process presented subsequent subsection output rcrv approach visualized data comprises graph display refactoring information two software release utilizing radar chart sequential step followed research illustrated fig additionally description dataset utilized research provided figure research step full size image outlined fig sequential step taken analyze data generate radar chart visualization using refactoring-centric radar visualization rcrv approach summarized follows step data collection database setup research process begin collection relevant data stored designated database data encompasses information crucial analysis software evolution refactoring activity step analysis evolutionary data collected data undergoes comprehensive analysis discern pattern trend software evolution step involves examining change codebase time identifying key point evolution gaining insight development process step refactoring identification identify instance refactoring within codebase specialized tool ref-finder employed tool help systematic detection classification refactoring activity carried software development lifecycle step refactoring data collection rcrv input refactoring data obtained previous step serf input rcrv tool data constitutes foundation upon rcrv approach operate step application rcrv approach building upon refactoring data step applies rcrv process analyze data rcrv approach discussed detail following section step generation radar chart visualization rcrv output result rcrv approach appear form radar chart visualization dataset description dataset utilized adopted previous study provided extensive information regarding refactoring source code metric open-source java system table composed release system characterized comprehensive manual validation process guarantee accuracy reliability data reffinder tool automatically extracted refactoring instance ensure completeness dataset reduce risk human error reffinder tool utilized identify categorize type refactoring throughout project release total 1,820 instance refactoring detected reffinder refactorings encompassed range operation including extracting method reorganizing code renaming dataset unique feature refactoring mapped source code element method class level including precise version line information allowing replication empirical investigation dataset used research encompasses range refactoring type class method data repository available http table refactoring type dataset used case case case full size table prepare data used rcrv visualization tool dataset preprocessing phase conducted phase summarized follows deleting extra data unnecessary approach e.g. metric data splitting data two file one class one method refactoring deleting every class method refactoring linking method respective class deleting refactoring type associated class method creating file necessary data case implementation develop tool refactoring used python generate radar chart used visualization refactoring purpose explored four case case visualization multiple refactoring multiple method one specific class refactoring counter case visualization one refactoring type multiple method multiple class refactoring counter case visualization multiple refactoring multiple class refactoring counter case visualization multiple refactoring evolution refactoring counter illustrated fig used library plotly visualization panda data manipulation analysis figure illustrate code developed generating four case case case case case respectively figure code snippet case full size image figure code snippet case full size image figure code snippet case full size image figure code snippet case refactoring type frequency dataset evolutionary data version version full size image several type refactoring dataset type refactoring used case case case shown table type refactoring used case shown table table refactoring type dataset used case full size table replication replicate refactoring visualization tool code accessed http output figure case 1–4 able dealt active way link http rcrv approach visualization result study propose new approach called radar chart refactoring visualization rcrv visualize refactoring source code across multiple software release rcrv represents refactoring event ring allowing viewer track refactoring trend time various refactoring type method class resulting graph offer concise informative representation refactoring evolution software system facilitating analysis historical trend prediction future direction identifying potential refactoring candidate system evolution crucial benefit visualization approach analysis past behavior includes four possible case case visualization multiple refactoring multiple method one specific class refactoring counter case visualization one refactoring type multiple method multiple class refactoring counter case visualization multiple refactoring multiple class refactoring counter case visualization multiple refactoring evolution refactoring counter case visualization multiple refactoring multiple method one specific class refactoring counter case radar chart multiple circle represent occurrence refactoring one specific class e.g. c15 class multiple method may get refactored e.g. m1c15 m2c15 m3c15 method class method denoted different color radius numbered depending frequency specific refactoring type occurred specific class multiple type refactoring distributed outer circle might different colored radial line different length depending frequency refactoring occurred method colored radial line exists specific refactoring type mean refactoring occur visualization case depicted fig according dataset eight refactoring type distributed outer circle shown fig seven method class represented different color example frequency introduce_explaining_variable method class time represented blue radial line frequency add_parameter method class time represented red line frequency remove_assignment_to_parameters method class time represented green line possible approach switch method want show radar chart figure show figure show figure show default case method switched figure visualization case class c15 switched full size image figure visualization case class c15 switched full size image figure visualization case method class c15 switched full size image case visualization one refactoring type multiple method multiple class refactoring counter case radar chart multiple circle represent occurrence one specific refactoring type e.g. multiple method several class distributed outer circle nine class c10 c14 c15 c16 c23 c24 represented different color example m1c5 represents method class class multiple method may get refactored e.g. m1c1 m2c1 m3c1 method class specific refactoring i.e. radius numbered depending frequency refactoring occurred method get refactored one single class grouped together depending frequency refactoring occurred method example fig show refactoring type add_parameter .for class represented black color frequency m1c1 m2c1 m3c1 respectively class represented olive green five method get refactored m1c24 m2c24 m3c24 m4c24 m5c24 refactoring frequency method respectively figure visualization case method class refactoring frequency full size image example m1c16 got refactored time denoted purple dot m1c23 show method class brown dot refactored time blue radial line show two method class got refactored time respectively previously mentioned switch class appear radar chart clicking class multiple class case visualization multiple refactoring multiple class refactoring counter case radar chart multiple circle represent occurrence multiple refactoring type e.g. several class e.g. c15 refactoring type distributed outer circle class denoted different color radius numbered depending frequency specific refactoring occurred class might different colored radial line different length depending frequency refactoring occurred class shown fig class c15 refactoring type remove_parameter remove_assignment_to_parameters consolidate_cond_expression refactored i.e. add_parameter refactored four time class c19 refactoring type consolidate_duplicate_cond_fragments refactored time figure visualization case class c15 c19 switched full size image case visualization multiple refactoring evolution refactoring counter case radar chart multiple ring represent occurrence multiple refactoring type e.g. evolution refactoring type distributed outer circle evolution version denoted different colour e.g. 1–2 represents evolution version version radius numbered depending frequency specific refactoring occurred specific version might different coloured radial line different length depending frequency refactoring occurred evolution figure present visualization data evolution version1 version version version version 3–4 version 4–5 switched figure show following refactoring occurred within 1–2 black colour frequency occurred3 time respectively visualization data evolution version version red colour show frequency refactoring type respectively figure visualization case refactoring 1–2 2–3 switched full size image refactoring visualization version 3–4 version 4–5 shown fig version 1–2 version 2–3 switched shown figure refactoring 3–4 occurred time time refactoring frequency v4-5 time time figure visualization case refactoring 3–4 4–5 switched full size image another example case shown fig evolution data version switched version combine fig figure visualization case evolutionary data 1–2 4–5 switched full size image evaluation refactoring visualization tool evaluate usability usefulness developed tool adopted controlled experiment research design ass impact visualization tool software refactoring activity evaluation study encompassed multiple phase beginning organization focused group session focus group session aimed familiarizing participating developer visualization tool providing understanding functionality following preliminary stage cohort software developer recruited take part subsequent evaluation visualization tool participant evaluative study comprised software developer employed prominent private-sector organization based jordan participant selection based relevance evaluation study objective willingness participate table summarizes demographic distribution participant table demographic characteristic participant full size table participant allocated two distinct group group group group consisted developer group assigned role control group wherein participant access visualization tool refactoring task group constituted experimental group provided access visualization tool task operated equivalent condition group subjected set predefined refactoring task task selected encompass variety refactoring activity commonly encountered software development ensuring experimental setup reflected real-world scenario refactoring task executed within context open-source project thus establishing realistic environment experiment quantitative metric employed ass impact visualization tool metric included cyclomatic complexity line code code duplication percentage maintainability index depth inheritance class coupling method complexity test coverage cyclomatic complexity used gauge complexity control flow refactored code code duplication percentage identified instance duplicated code maintainability index quantified maintainability refactored code class coupling measured dependency class test coverage used evaluate extent code coverage achieved automated test table show code quality metric employed study among common widely used metric software engineering inclusion metric evaluation study aim provide quantitative assessment rcrv influence various aspect code quality maintainability development efficiency therefore allowing calculate percentage improvement metric two group provide data-driven conclusion tool benefit effectiveness visualization tool refactoring process table result comparison conducted group group full size table upon completion refactoring task gathered data subjected thorough analysis comparative assessment metric group group conducted identify discernible difference resulting utilization visualization tool analysis focused analyzing aforementioned code metric number refactoring performed time needed apply refactoring task additionally p-value calculated two group 0.05 implies two group statistically different table outline result obtained comparison group without visualization tool group visualization tool regarding various key metric metric provide insight impact utilizing visualization tool refactoring activity follows cyclomatic complexity group exhibited lower cyclomatic complexity value compared group indicating visualization tool contributed reducing complexity control flow codebase line code group showed lower line code count opposed group suggesting visualization tool aided streamlining optimizing code length code duplication group demonstrated lower code duplication percentage contrast group indicating visualization tool effectively assisted mitigating duplicated code segment maintainability index maintainability index higher group group highlighting visualization tool positively influenced overall maintainability codebase depth inheritance group exhibited lower depth inheritance value compared group suggesting visualization tool contributed concise comprehensible class hierarchy class coupling class coupling value lower group opposed group indicating visualization tool facilitated reduction interdependency class method complexity group showed lower method complexity value comparison group suggesting visualization tool aided simplifying individual method logic test coverage group achieved higher test coverage percentage compared group indicating visualization tool positively influenced comprehensiveness automated testing number refactoring group performed higher number refactoring task contrast group signifying visualization tool potentially enabled frequent effective refactoring time group exhibited lower average time per refactoring task compared group suggesting visualization tool led faster efficient refactoring activity collective result indicate utilization visualization tool positive influence various aspect refactoring group demonstrated improvement code quality maintainability complexity test coverage efficiency evidenced metric presented table next step evaluation part distribution questionnaire group used visualization refactoring tool questionnaire designed based construct technology acceptance model developed davis fig questionnaire item proposed appendix show scale item adopted measure usefulness ease use intention use figure technology acceptance model full size image evaluate construct following metric retrieved cronbach alpha measure internal consistency cut 0.70 composite reliability measure reliability cut 0.70 average variance extracted ave measure validity cut 0.50 table show value retrieved internal reliability validity met minimum requirement suggested literature table result internal consistency composite reliability validity ave full size table shown table group perceives rcrv useful easy use intend use future according obtained result conclude proposed visualization tool refactoring considered useful developer appealing easy use implication implication research multifaced highlighting benefit rcrv assist professional educator researcher developer field software engineering follows practitioner newly introduced visualization tool stand valuable tool assist professional like software developer software engineer dealing complexity existing refactoring tool offer representation simplify comprehension complex code modification innovation empowers developer explore evolution refactoring within software system enabling analysis historical trend refactoring prediction future direction developer identify potential area refactoring foster proactive approach code enhancement maintenance enhancing overall software quality rcrv tool potential improve refactoring task offering insight different change affect overall structure maintainability software visualization refactoring action promotes adoption best practice software engineering field turn ensures code quality readability tool builder software development industry may integrate expand rcrv tool within software development environment integration improve refactoring capability educator educator utilize rcrv tool teaching aid software engineering discipline provides interactive demonstration refactoring process help student better understand abstract concept utilizing rcrv tool aid student gaining hands-on experience refactoring technique controlled setting utilizing user-friendly tool improve skill comprehension educator make use rcrv tool illustrate benefit rationale behind implementing refactoring strategy researcher researcher could use rcrv tool gather data process practice refactoring tool capable capturing user interaction offering data used empirical study experiment using tool may enable researcher ass efficiency visualizing refactoring discover novel method visualizing refactoring task visualization provided rcrv tool effectively assist researcher analyzing comprehending refactoring data empirical evaluation proposed tool suggests practicality user-friendliness ease use developer highlighting crucial role improving software development process conclusion software refactoring essential practice software engineer improve quality codebase visualization essential tool understanding impact refactoring operation existing visualization technique several limitation make effective visualizing effect software refactoring paper propose novel approach visualize software refactoring using radar chart proposed approach help developer highlight area refactoring multiple refactoring multiple method multiple class evolution understand impact code change make informed decision refactoring process conclusion paper highlight importance refactoring visualization software engineering lack effective visualization aid developer understanding impact change use radar chart provides developer clear concise view change made refactoring allowing identify area improvement code quality visualization approach save time effort development process allowing developer quickly identify potential issue code violate design principle susceptible bug paper offer valuable contribution field software engineering providing developer powerful tool improve code quality streamline development process limitation future work application radar chart mean evaluating impact refactoring may universally applicable software project particularly smaller codebase fewer dimension code require improvement important note rcrv approach offer useful visualization tool tracking software refactoring valid large small datasets produce visualization different level e.g. method class one refactoring type n-releases applicability may limited certain type software project smaller codebases project fewer dimension require improvement may benefit much approach different project may require diverse approach depending need objective work initially based ref-finder due available dataset constraint research timeline recognize limitation choice tool future iteration work plan explore use accurate tool refactoring miner enhance accuracy refactoring data value insight gained rcrv evaluation study nevertheless important acknowledge certain limitation particularly small sample size may impact broader applicability additionally encountered challenge accessing larger participant pool due resource constraint future research address limitation expanding sample size combining qualitative method gain deeper insight developer experience proposed rcrv approach offer promising tool software developer visualize track evolution refactoring codebases investigation necessary evaluate visualization tool real-world project use radar chart proposed may extended include additional dimension code security performance provide comprehensive view software quality empirical study involving software developer working real-world project could conducted evaluate effectiveness approach additionally approach could integrated existing refactoring tool offer developer streamlined intuitive approach visualizing impact code alteration extension may help identify potential area improvement future release making rcrv approach valuable tool improving software quality