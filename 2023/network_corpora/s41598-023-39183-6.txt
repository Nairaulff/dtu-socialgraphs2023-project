introduction microservice architecture programming method decomposes single application various smaller service executes view shortcoming large-scale monolithic application term maintenance reusability expandability microservice architecture divide application multiple service development easier maintain expand based architecture developer choose suitable technology type service reduces development cost improves development efficiency nevertheless approach introduces new challenge communication service different data structure technology type among multiple service therefore interprocess communication ipc service become one important challenge facing microservice architecture development microservice architecture choice ipc technology important decision affect nonfunctional requirement entire architecture commonly used ipc technology obtained remote procedure call rpc representational state transfer rest technology therefore selection two type communication technology crucial service communication development microservices propose microservice communication technology called rpcx adopts rpc nonblocking nio communication model protobuf data serialization standard establish communication bridge client server also dynamic proxy annotation configuration technology obtain dual-end rpc communication technology client server thus render rpc communication efficient convenient contribution study include microservice communication technology based rpc communication mechanism-rpcx compared technology technology significantly reduces service communication time increase transaction per second tps stress test different thread request show time-consuming performance 55.9–88.9 higher technology tps 126.9–802.8 higher technology user call remote service method locally without perception improve ease use dynamic agent technology annotation configuration rule introduced rpcx developer use local method call remote service method without knowing bottom layer operates achieve purpose two-stage service communication buffer pool technology improve performance rpcx time-consuming operation input buffer pool program initialization stage efficient data reading program running stage rest paper organized follows section related work introduces existing literature related field section rpcx describes design method rpcx four key aspect dynamic proxy technology annotation configuration rule network communication model transmission data format section experiment experimentally compare rpcx two communication technology term computational stress performance section conclusion summarizes finding outlook related work performance various ipc communication technology impact overall performance microservices compared analyzed extant literature example kumar shafabakhsh hong discussed compared performance indicator various communication technology google remote procedure call grpc thrift rest rabbitmq proposed best application scenario gan delimitrou established microservice system streaming medium service evaluate various indicator microservices including performance impact rpc communication microservices entire system georgiou spinellis discussed energy consumption various ipc communication technology different programming language gan sriraman wenisch ueda others focused impact communication technology performance microservice architecture gan also analyzed time taken process communication request respect time taken entire application sriraman wenisch developed suite microservices analyze influence operating system communication request overall latency microservices ueda tested monolithic application microservice architecture respectively concluded optimization communication service improve overall performance summarize performance communication technology contributes overall performance microservice architecture therefore proposed efficient microservice communication technology called rpcx nonblocking network model protobuf data transmission format underlying communication mechanism dynamic proxy technology annotation configuration rule allow developer call method locally purpose remote method use buffer pool technology input time-consuming operation buffer pool program read data high speed running phase play positive role promoting development microservice ipc communication technology field rpcx first structure high-performance remote communication technology rpcx described next four key component technology namely dynamic proxy annotation configuration rule network communication model transmitted data format described overall structure rpcx technology objective rpcx enable local application call service remote server ease efficiency accordingly describe four component mentioned previous paragraph dynamic proxy annotation configuration rule network communication model transmitted data format illustrated fig rpcx based principle rpc remote communication divided two part client server process client part remote proxy object implemented first rpcx used dynamic proxy technology proxy remote proxy service local service information required locally call remote service server information service name parameter name value locally annotated disguise service name information obtain service positioning enable developer implement corresponding information could directly obtained via provided annotation class communication model implemented using nonblocking nio communication model communication data implemented using protobuf required information encoded binary data transmitted server network communication model service decoding binary result data returned server locally decoded returned method handler processing figure overall structure rpcx communication technology full size image server part divided service provider service center service provider used provide service interface definition service implementation method one hand service center responsible publishing local service server remote service provide service client hand managed remote service could perform operation start stop obtain port number remote service developer could disguise service name annotation publish disguised service name unified management service center binary data received nio network service server data decoded obtain information required service service executed result encoded binary data result returned client key component dynamic proxy purpose dynamic proxy call method remotely server side similar method client side user call remote method locally without aware therefore calling local method user requires information remote server namely server address port number name name server method rpcx java development kit jdk proxy create proxy object access target server transmit remote method name local method parameter value parameter type server upon receiving method execution result server return value method obtaining effect dynamically calling local method obtain remote server method return value runtime program fig figure dynamic proxy structure full size image annotation configuration rule improve user friendliness secure application programming interface api exposed server rpcx annotation configuration rule disguise server information configure client side example rpcxclient annotation class used called local interface class annotation class three attribute remoteservername remoteserverdomain remoteserveraddress represent remote server service name remote server port number remote server address respectively annotation remote server information called directly marked local interface class reducing step feeding relevant information configuration file local interface method client method used annotate class mark name remote server method accessed local method enables remote server method called locally using annotation class remote server annotate service method name requires publish prcxserver method annotation class published name might actual name hence rpcx take annotated name standard thus actual name disguised actual information masked enhancing security server-side information better performance initialization phase rpcx recursively traverse annotation class project convert unified structure directly use structure obtain local remote server information runtime fig figure annotation configuration design structure full size image network communication model network communication model rpcx adopted netty asynchronous nio design fig created nioeventloop thread client server side configured component bootstrap serverbootstrap start guide executed data i/o operation channel pipeline figure network communication model structure full size image client transfer data server binary format upon receiving data server decodes serializes return result client manner however multithreaded asynchronous nature netty i/o operation server return result identity thread transferred result revealed client solve problem client transfer data unique identifier request added key-value pair key request identifier value rpcxfuture structure established client cache pool rpcxfuture used save serialized data returned server result would stored key-value pair client cache pool request key client could receive unique result corresponding request calling transmission data format rpcx employ protobuf transmission data format fig client sends rpcxrequest message body server unique identifier request described network communication model identifier used indicate uniqueness result transmission request sending receiving multithreaded message identifier random long number service method name sent server information disguise respectively group method array message body containing method parameter type method parameter value rpcxreply message body data structure method returned server upon receiving rpcxrequest request server add unique identifier request result data returned method rpcxreply subsequently relay client form binary data client receives result returned method client structure data according return type method form complete data path locally calling remote method figure protobuf transmission format design full size image experiment compared proposed rpcx two service communication technology term stress performance collated experimental result interpreted experimental environment experimental platform experimental platform consists two cloud server identical configuration specification cloud server follows vcpu memory cloud storage mbps bandwidth cloud server equipped centos 8.2 64-bit operating system jdk 1.8 runtime environment installed service communication technology communication technology comparison selected rest grpc rest stateless architectural style distributed system widely used provide globally accessible apis microservices developer commonly use spring openfeign rest technology openfeign declarative webservice client core function providing simple efficient rpc call rest form http method grpc cross-platform open-source high-performance rpc framework developed google protocol buffer http/2 boost speed interoperability service selected grpc several company using microservices e.g. netflix cisco coreos adopting production lifecycle experimental architecture experiment set two cloud server identical configuration cloud server cloud server cloud server serf client-side server rpcx grpc openfeign used send information whereas cloud server serf server-side server used receive information sent cloud server return result performance testing experiment platform architecture three technology shown fig figure experimental architecture full size image ensure fairness experiment data transmitted rpcx grpc openfeign experiment string grpc openfeign used example method given official website key software version used experiment presented following table table table software version used rpcx versus benchmark stress performance test full size table performance experiment method evaluate performance rpcx communication technology conducted performance stress benchmark test comparing grpc openfeign technology stress benchmark test method evaluating performance related technology simulating multi-threaded multi-request scenario test program runtime transaction per second tps test two indicator developed client-side testing program pseudocode testing program follows pseudocode client-side testing program loop operation line client-side testing program designed run communication technology time count thread request record consumption time run average program runtime tps run calculated purpose operation test performance communication technology fair accurate manner avoid impact exceptional condition server communication failure experimental data single run may affect overall accuracy reliability experimental result test program take thread count request count input variable define threshold thread count request count integer theadnumber\le requestnumber\le shown line testing program tps important metric measuring processing capability system stress performance testing experiment calculated count request program runtime follows tps=\frac requestnumber time program runtime expressed time millisecond hence calculating tps divided request convert value second performance stress test three communication technology simulate data communication client-side standardized server-side program different thread request count therefore server-side testing program serf start interact client-side data communication result server-side testing program grpc openfeign example official startup server-side program contrast server-side testing program rpcx structure shown section overall structure rpcx technology pseudocode follows pseudocode server-side test program facilitate performance experiment cloud server packaged testing program rpcx grpc openfeign component package file extension .jar refer jar package jar package three communication technology divided client-side server-side uploaded cloud server respectively irrelevant thread closed maximize utilization server resource testing program execution maximize stress performance rpcx grpc openfeign communication technology cloud server technical performance testing plan developed cover full range two input parameter testing program thread count request count thread count request count start continue accumulate value large enough exhaust server resource resulting infinitely prolonged communication time make communication impossible based strategy threshold thread count request count run loop thread count request count increasing time implement strategy wrote line shell command loop run testing program cloud server pseudocode follows pseudocode running test program shell experiment found server resource exhausted communication established runtime single-cycle program generally min additionally communication exceeding min often meaningless practical application therefore set waiting time program execution line test shell consider communication failed single-cycle communication time exceeds min communication result waited experimental data analysis experiment save server resource used data storage performance stress test result three communication technology stored real-time server form file thread-request count unit totaling 186,860 data experiment needed store experimental data database data analysis first established original data model developed data cleaning program original data model shown fig represents primary key database table integer data type automatically increase increase data volume type represents communication technology integer data type type represents rpcx represents grpc represents openfeign threadnum represents count thread requestnum represents count request timetotal represents total running time test program tps represents transaction processed per second order represents order test program run time thread request count combination therefore threshold order 0\le order\le method original data model get value set value attribute figure experimental data model original data model cleaned data model full size image original data cleaning program aim traverse original data file read data file one one transform data original data model map original data model corresponding database field using original data model program insert original data database completing task reading storing original data file database analysis original data model found thread count request count technology performed round operation round first run time significantly higher run time average time higher taking rpcx technology example table show part original data field meaning described table present run time two round consisting run thread count request count respectively order corresponds first run time round table seen first run time request count respectively time higher nine program run time analysis showed test program start round testing need load various additional component package lead extended first run time therefore believe first run time round testing reference value purpose detecting time performance communication technology experiment therefore analyzing test result data need clean original result data remove first test program runtime data calculate average remaining nine run time final experimental result round table partial original data rpcx full size table according data analysis strategy formulated completing data cleaning established cleaned data model shown fig store cleaned data database item cleaned data model meaning item original data model shown fig item fig timetotalavg represents average value program runtime double-precision floating point data type item tpsavg represents average tps double-precision floating point data type method cleaned data model used get set value attribute using cleaned data model map cleaned data model new table field database store data database thus completing data storage work cleaning due large volume data present performance data processing three communication technology clearly sequentially expanded data processing thread count three technology low high starting thread increasing thread reaching thread thread count data processing technology start request increase request reaching request evaluate performance figure show performance rpcx communication technology term average program runtime tps low thread count high thread count inferred set threshold value thread request count however experimental result revealed rpcx demonstrate difference average program runtime millisecond experimental significance hand consumption cloud server resource rpcx communication reach limit resulting either long execution time stopping rpcx therefore fig display bar chart average program runtime rpcx low thread count high thread count observed thread count increase program runtime rpcx also increase within thread count execution time rpcx increase request count increase distribution trend conforms objective law running time required communication technology increase testing pressure increase figure performance rpcx communication technology data processing full size image figure show bar chart average tps rpcx low thread count high thread count indicated request volume constant higher execution speed larger tps figure seen low thread count short execution time high thread count long execution time tps decrease request volume increase fully conforms rule communication technology high tps low response time figure show bar chart average program running time grpc communication technology starting low thread count increment high thread count request count increment 200–500 according experimental result thread count threshold determined request count threshold determined conducting performance test grpc communication technology program show running time thread count greater request count therefore display result clearly request count running time bar chart grpc uniformly set increment 200–500 figure show bar chart average tps thread count ranging high thread count request count ranging similar rpcx grpc also follows objective rule program running time increase tps decrease gradually performance pressure increase performance test figure performance grpc communication technology data processing full size image figure show bar chart average running time program using openfeign communication technology low thread count increment high thread count request count increment experimental result show thread count threshold request count threshold figure show tps situation thread count ranging request count ranging similar rpcx grpc openfeign follows objective law program running time increase gradually tps decrease performance pressure continuously increase performance stress test figure performance openfeign communication technology data processing full size image according experimental data shown fig compiled comparison average program runtime average tps three communication technology table respectively table present comparison average program runtime three communication technology thread request count respectively thread rpcx employ caching mechanism store target server remote service information locally program initialization described annotation configuration rule rpcx section enhance performance rpcx time-consuming operation traversing parsing annotation class performed program initialization information annotation class stored local cache pool rapid data access program execution rpcx non-blocking netty network model binary data model protobuf data transmission network communication model asynchronously transmits request response result stored local cache pool key-value format local asynchronous call design approach greatly improve performance rpcx shown table rpcx outperforms grpc openfeign 55.9–88.9 term time performance low thread high thread correspondingly table present comparison tps three communication technology thread request count respectively thread rpcx outperforms grpc openfeign 126.9–802.8 term tps low thread high thread table comparison average program runtime rpcx two technology full size table table comparison average tps rpcx two technology full size table conclusion designed new microservice service communication technology called rpcx compared grpc openfeign term stress performance according result rpcx exhibit good service communication time tps performance novel method proposed study improve performance communication technology field service communication microservice architecture help future researcher improve communication performance ease use microservices promote development field microservices ipc technology future experiment extended multiple cloud host across host complex experimental plan developed