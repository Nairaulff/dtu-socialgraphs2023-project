introduction wang tile non-rotatable unit square colored edge constitute formalism introduced wang visualize decidability problem predicate calculus asking general algorithm decides emptiness satisfiable set logical formula form ... followed logical combination predicate without quantifier formulating equivalent domino problem wang considered infinite number copy arbitrary set wang tile investigated whether exists simply-connected valid tiling infinite plane moreover conjectured tile set form torus i.e. cover periodic simply-connected rectangular domain identical coloring opposite edge generate infinite valid tiling berger disproved conjecture finding tile set cover infinite plane aperiodically exploiting kahr reduction turing halting problem origin-constrained domino problem hence domino problem proven undecidable consequently general finite algorithm producing infinite valid tiling exists far attention paid finite version domino problem bounded tiling i.e. searching fixed-sized valid tiling generated arbitrary tile set contrast infinite variant bounded tiling -complete general thus decidable e.g. theorem 7.2.1 finite-time algorithm developed however available approach exploit specific property particular tile set address tile packing problem edge-matching puzzle tile set placed exactly another closely related problem emerges tiling polyominoes work investigate bounded wang tiling problem full generality goal first survey significant aperiodic tile set aperiodic tile set section application wang tile application wang tile section wang tiling generation algorithm section list available algorithm generation wang tiling finally aim contribution appear summarized aim novelty section aperiodic tile set originally unexpected property wang tile sets—aperiodicity—resulted long-term competition among scientist mathematical logic computer science discrete mathematics even recreational mathematician find aperiodic tile set minimum cardinality chapter starting berger tile set containing tile took almost year two set tile found proved minimal see fig graphical overview selected historical development figure list aperiodic wang tile set full size image läuchli sent wang aperiodic set tile color remained unpublished meanwhile unaware läuchli result knuth simplified berger set tile color robinson developed set tile color tile color anticipated existence set tile penrose developed new approach based kite dart tiling leading set tile robinson contact penrose modified penrose approach reach reduced set tile color using technique together penrose rhomb tiling grünbaum shephard obtained set tile color another two tile set discovered ammann used so-called ammann bar reach tile color building ammann tiling robinson obtained set tile color subsequent size reduction smallest aperiodic set occurred kari developed new method based mealy machine multiplying beatty sequence presented set tile color čulík using approach reduced set even tile color search minimal aperiodic set concluded jeandel rao used enumeration approach find aperiodic set tile color proved non-existence aperiodic set either containing fewer tile labeled color addition original wang tile lagae dutré described subset wang tile corner tile refer appendix section supplementary material relation edge-based wang tile adjacency rule stored colored corner instead edge year constructed multiple aperiodic set corner tile set corner tile color smallest one set simplified nurmi corner tile color claimed aperiodic application wang tile thanks property particular tile set generate aperiodic tiling wang tile gained interest among several discipline building original purpose wang tile proof first-order logic also used cellular automaton theory topology group theory symbolic dynamical system computer graphic stam adopted wang tile generate aperiodic texture assigning pattern tile assembled seamless continuous texture valid tiling cohen recognized stochastic nonperiodic tiling easier handle computationally provide larger degree freedom wang-tile-based approach generating seamless texture became popular also including generation point pattern volume predefined statistical property science wang tile related aperiodic tiling served key tool understanding 5-fold symmetry electron diffraction pattern quasicrystals another application nanoscale involved molecular dna-based realization wang tile introduced winfree provided self-assembly biological nanostructures aperiodic pattern self-assembly process dna wang tile also powered custom dna-based computation fueled turing completeness wang tile beyond nanoscale wang tile also used efficient compression reconstruction microstructures generalizing traditional periodic-unit-cell homogenization-based framework nonperiodic setting consequently numerical analysis random heterogeneous material accelerated exploiting multiple tile occurrence physical domain inverse problem designing modular nonperiodic structure material developed bilevel approach optimize truss module based corner wang tiling formalism clustering-based method designing modular structure mechanism continuum topology optimization work coloring wang tile edge encode information module assembled maintain mechanically-compatible design finally jílek developed centimeter-scale self-assembly procedure building wang tiling formalism wang tiling generation algorithm best knowledge general approach solving bounded tiling problem reported literature available result specific single family tile set consider infinite thin strip follows describe gist three tiling algorithm substitution-based stochastic transducer-based substitution-based tiling algorithm given tile set substitution map assigns tiling _k\ tile refer reader notation preliminary section definition consequently arbitrary-sized tiling follow placed tile recursively applied substitution rule hence tiling grows iteratively clearly procedure low complexity specific tile set allow substitution rule generates valid tiling stochastic tiling algorithm computer graphic wang tile mostly used generating visually appealing yet compressed texture essential generate nonperiodic pattern quickly best achieved stochastic tile sets—usually containing combination edge label given number color example stochastic tiling algorithm tiling generated row-wise neighbor tile already placed always selected least two tile random approach extended towards hash-based direct stochastic tiling algorithm note stochastic algorithm enable straightforward enforcement several tile- edge-based constraint transducer-based tiling algorithm transducer-based tiling algorithm build fact domino problem decidable solved polynomial time bi-infinite path formed arbitrary cycle transducer graph see notation preliminary section clarification generate valid tiling multiple row product several transducer must computed hence must enumerate feasible valid tiling requested height unit width find path given length transducer graph just-formed tile set obviously approach work well tiling thin strip however impractical larger nearly-square domain aim novelty contribution consider bounded wang tiling general form thereby allowing arbitrary tile set control resulting tiling follows state-of-the-art survey method published yet believe development algorithm important multiple reason first already investigated modeling optimization non-periodic stochastic microstructures wang tiling hope extension method general tile set would enable characterizing broader class non-periodic conventional material meta-materials thus also improve upon performance optimized design due turing completeness wang tile might also potentially bridge field meta-materials mechanical computing direction generation bounded tiling represents design particular finite automaton material state defined design individual tile apart emerging application material engineering believe developing unified methodology independent interest e.g. verification result available literature justify claim finding two error well-established aperiodic tile set first provide necessary definition notation preliminary section make manuscript self-contained subsequent part devoted four integer programming formulation generation valid tiling decision variant rectangular valid tiling section maximum rectangular valid tiling maximum rectangular valid tiling section maximum-cover maximum cover section maximum adjacency constraint satisfaction maximum adjacency constraint satisfaction section allow finer control resulting tiling also include simple extension prescribe tile- color-based boundary condition periodic constraint tile-packing constraint extension section due complexity proposed formulation heuristic algorithm maximum cover tiling problem section propose heuristic graph-based algorithm tackle maximum-cover optimization variant maximum cover section developed algorithm relies solution shortest path problem directed acyclic graph hence posse low asymptotic complexity show slight modification maintains approximation ratio 2/3 tile set whose transducer graph cyclic result section collect result computational assessment integer programming formulation integer programming formulation section heuristic heuristic algorithm section benchmarking periodic tile packing formulation algorithm lagae dutré periodic tile packing problem section close section two surprising observation found integer programming two well-known aperiodic tile set knuth tile set tile contains tile unusable infinite simply-connected valid tiling unusable tile knuth tile set section lagae tile set corner tile aperiodic periodicity lagae corner tile set section summarize result conclusion section notation preliminary considering finite set color code n_\mathrm wang tile quadruple color code c^\mathrm c^\mathrm c^\mathrm c^\mathrm c^\mathrm c^\mathrm c^\mathrm c^\mathrm standing color code north west south east edge tile respectively tile therefore represented graphically non-rotatable square shown fig without loss generality consider square unit size figure graphical representation wang tile tile set full size image tile set represents finite collection n_\mathrm tile see fig c^\mathrm c^\mathrm c^\mathrm c^\mathrm c^\mathrm c^\mathrm c^\mathrm c^\mathrm call tile set complete using notation ^2\ denote intersection set integer lattice point tiling ^\mathscr bounded domain ^2\ arrangement copy tile tile placed cover entire domain fig formally tiling mapping ^\mathscr assigning single tile every coordinate consequently call tiling ^\mathscr simply connected iff domain figure color matching among tile full size image tiling ^\mathscr rectangular n_\mathrm n_\mathrm hold set height width coordinate valid tiling wang tiling denoted ^\mathscr _\mathrm valid tiling equal color code shared edge pair adjoining tile therefore mapping ^\mathscr _\mathrm valid satisfies addition requirement ^\mathscr additional constraint aligned c^\mathrm ^\mathscr _\mathrm valid c^\mathrm ^\mathscr _\mathrm valid i+1 i+1 aligned aligned c^\mathrm ^\mathscr _\mathrm valid c^\mathrm ^\mathscr _\mathrm valid j+1 j+1 aligned provided oriented accordingly fig ^\mathscr _\mathrm valid exists say domain admits valid -tiling tileable consider max rect simply connected rectangular -tileable maximum rectangular valid tiling ^\mathscr max rect valid tiling domain max rect max rect max rect notation denotes cardinality set maximum cover ^\mathscr max cov valid tiling max cov max cov arbitrary -tileable subdomains max cov max cov rectangular valid tiling said periodic color code opposite side rectangle match valid tiling periodic considered tile set allows least one periodic rectangular tiling call nonperiodic finally periodic pattern exists tile set still allows valid tiling infinite plane referred aperiodic similarly tile set periodic permit periodic valid tiling aperiodic feasible valid tiling aperiodic transducer graph g_\mathrm tile set directed multi- graph representation mealy machine without initial terminal state consists state graph vertex transition directed edge _\mathrm aligned _\mathrm =\bigcup c_k^\mathrm c_k^\mathrm c_k^\mathrm c_k^\mathrm aligned dual transducer graph g_\mathrm composed dual wang tile reflecting along major diagonal tile edge set defined aligned _\mathrm =\bigcup c_k^\mathrm c_k^\mathrm c_k^\mathrm c_k^\mathrm aligned illustrate construction include visual example fig figure transducer dual transducer graph tile set full size image integer programming formulation section introduce four integer programming formulation generation valid tiling first one rectangular valid tiling section develops decision variant later section investigate maximum rectangular tiling maximum rectangular valid tiling section maximum cover maximum cover section maximum adjacency constraint satisfaction maximum adjacency constraint satisfaction section finally extension section proposes several extension facilitate finer control resulting tiling rectangular valid tiling let consider fundamental problem finding ^\mathscr _\mathrm proving doe exist restrict rectangular simplify notation however presented approach also extends general case achieve introduce binary decision variable 0,1\ denoting placement tile coordinate aligned array iff tile k\text lie coordinate otherwise array aligned consequently mapping ^\mathscr expressed aligned ^\mathscr aligned together requirement every coordinate occupied one tile aligned aligned similarly color code tile placed expressed using binary variable aligned ^\mathscr ^\mathrm c_k^\mathrm aligned aligned ^\mathscr ^\mathrm c_k^\mathrm aligned aligned ^\mathscr ^\mathrm c_k^\mathrm aligned aligned ^\mathscr ^\mathrm c_k^\mathrm aligned inserting lead horizontal vertical adjacency constraint expressed term decision variable aligned c_k^\mathrm c_k^\mathrm i+1 n_\mathrm aligned aligned c_k^\mathrm c_k^\mathrm j+1 n_\mathrm aligned combining provides complete binary linear programming representation valid tiling ^\mathscr _\mathrm valid computational reason proved advantageous organize constraint according color code aligned c_k^\mathrm =\ell i+1 c_k^\mathrm =\ell n_\mathrm aligned aligned c_k^\mathrm =\ell j+1 c_k^\mathrm =\ell n_\mathrm aligned iverson notation c_k^\mathrm express added sum c_k^\mathrm constraint requires number tile south edge colored equal number tile i+1 north edge marked either tile shared edge colored single tile coordinate common edge labeled analogously vertical adjacency constraint horizontal constraint also enforces equality among number tile east edge colored number tile j+1 west edge colored identical finally combining noticing constraint naturally propagate adjacency constraint domain boundary compare 10d 10e lead binary programming formulation aligned find aligned 10a aligned s.t c_k^\mathrm =\ell i+1 c_k^\mathrm =\ell n_\mathrm aligned 10b aligned c_k^\mathrm =\ell j+1 c_k^\mathrm =\ell n_\mathrm aligned 10c aligned n_\mathrm aligned 10d aligned n_\mathrm aligned 10e aligned 0,1\ aligned 10f provides complete representation bounded tiling problem i.e. valid tiling solve integer program conversely feasible solution valid tiling moreover observe problem consists two totally unimodular constraint considered independently 10c 10e representing row tiling 10b 10d column tiling considered simultaneously resulting problem becomes -complete maximum rectangular valid tiling solution found acceptable time period solution exists one resort relaxing requirement valid tiling search valid tiling largest rectangular subdomain figure admissible tile placement forbidden placement maximum rectangular valid tiling formulation full size image without loss generality let assume maximum rectangular valid tiling always contains anchor tile placed i.e. aligned 1,1 aligned hand coordinate may contain tile empty thus aligned 1,1 aligned figure six possible placement tile combination appear rectangular tiling combination full size image let pick two vertically adjacent coordinate i+1 tile placed i+1 another tile placed otherwise simply-connected rectangular tiling containing tile i+1 validity tiling also requires identical color code shared edge hand tile placed i+1 coordinate may either occupied empty allowed forbidden combination shown fig a–d formally stated term decision variable consideration expressed aligned c_k^\mathrm =\ell i+1 c_k^\mathrm =\ell n_\mathrm aligned similar argument hold also coordinate j+1 resulting constraint aligned c_k^\mathrm =\ell j+1 c_k^\mathrm =\ell n_\mathrm aligned allowed forbidden combination case shown fig e–h developed constraint enforce simple connectedness however guarantee resultant tiling rectangular adjacent tile placed i+1 j+1 i+1 j+1 respectively constraint allow assembly shown fig combination appear simply-connected rectangular tiling must exclude feasible set aligned i+1 j+1 i+1 j+1 n_\mathrm n_\mathrm aligned finally combining together objective function maximize rect provides binary maximum rectangular valid tiling optimization program aligned aligned 16a aligned s.t c_k^\mathrm =\ell i+1 c_k^\mathrm =\ell n_\mathrm aligned 16b aligned c_k^\mathrm =\ell j+1 c_k^\mathrm =\ell n_\mathrm aligned 16c aligned i+1 j+1 i+1 j+1 n_\mathrm n_\mathrm aligned 16d aligned 1,1 aligned 16e aligned 1,1 aligned 16f aligned 0,1\ aligned 16g contrast feasible solution optimization program found polynomial time e.g. tiling first row column bounded tiling problem however finding optimal solution -hard optimization problem reducible decision version fixing value objective function enforces equality 16b 16c 16f making constraint 16d redundant consequence maximum cover another option avoiding infeasibility rest neglecting requirement simple connectedness hence allowing placement empty tile void section therefore search maximum cover equivalently valid tiling possibly disconnected domain cov maximum cover formulation assume two adjacent tile satisfy edge-matching constraint valid tiling also satisfied tile-void void-tile void-void combination void located thus coordinate occupied either tile void implying aligned aligned vertical horizontal edge matching condition become aligned c_k^\mathrm =\ell j+1 c_k^\mathrm aligned 18a aligned c_k^\mathrm =\ell i+1 c_k^\mathrm aligned 18b finally combination 18a 18b objective function maximize cov lead binary optimization problem aligned aligned 19a aligned s.t c_k^\mathrm =\ell j+1 c_k^\mathrm aligned 19b aligned c_k^\mathrm =\ell i+1 c_k^\mathrm aligned 19c aligned aligned 19d aligned 0,1\ aligned 19e program trivially -hard requiring objective function 19a least implies aligned aligned i.e. position occupied wang tile moreover 19b 19c require adjacent tile share color code common edge consequently resulting tiling void-free valid solves -complete bounded tiling problem maximum adjacency constraint satisfaction decision problem also constitutes specific instance constraint satisfaction problem csp another optimization variant come formulation max-csp problem maximizing number satisfied clauses—color match case therefore vertical horizontal edge introduce new variable ^\mathrm n_\mathrm ^\mathrm n_\mathrm respectively adjacency constraint relaxed considering aligned c_k^\mathrm =\ell i+1 c_k^\mathrm =\ell ^\mathrm n_\mathrm aligned 21a aligned c_k^\mathrm =\ell j+1 c_k^\mathrm =\ell ^\mathrm n_\mathrm aligned 21b instead indeed ^\mathrm edge-matching requirement neighboring tile i+1 satisfied violated otherwise similarly ^\mathrm guarantee color match among tile j+1 finally rewriting absolute value two linear inequality supplying objective function maximize number color match yield binary optimization problem aligned i\in n_\mathrm ^\mathrm i\in n_\mathrm ^\mathrm aligned 22a aligned s.t c_k^\mathrm =\ell i+1 c_k^\mathrm =\ell ^\mathrm n_\mathrm aligned 22b aligned i+1 c_k^\mathrm =\ell -\sum c_k^\mathrm =\ell ^\mathrm n_\mathrm aligned 22c aligned c_k^\mathrm =\ell j+1 c_k^\mathrm =\ell ^\mathrm n_\mathrm aligned 22d aligned j+1 c_k^\mathrm =\ell c_k^\mathrm =\ell ^\mathrm n_\mathrm aligned 22e aligned aligned 22f aligned 0,1\ aligned 22g -hard due reduction setting ^\mathrm ^\mathrm zero feasible solution found polynomial time finding valid row/column tiling row/column either term i\in n_\mathrm ^\mathrm i\in n_\mathrm ^\mathrm equal zero extension focused solely formulation bounded tiling problem searching arbitrary valid tiling however potential application may require finer control resulting tiling thus section state simple extension enforce tile- color-based boundary condition solve tile packing problem enforce variable-sized periodic boundary condition tile-based boundary condition first consider boundary condition form prescribed tile simplest one enforce placement tile aligned aligned similarly may prevent tile placed aligned aligned placement identical tile coordinate requires aligned aligned conversely different tile coordinate secured aligned aligned color-based boundary condition addition tile-based constraint may also enforce specific color code individual edge color north edge set aligned c^\mathrm aligned contrary may prevent color requiring aligned c^\mathrm aligned color code north edge west edge established aligned c^\mathrm c^\mathrm aligned different color aligned c^\mathrm c^\mathrm aligned periodic tiling domino problem wang investigated existence tile set admitting infinite aperiodic tiling consider similar setting finite domain examining periodicity periodic color-based boundary condition begin requiring equal coloring fixed opposite domain boundary aligned n_k s_k aligned 31a aligned i,1 w_k e_k aligned 31b adding decision problem thus ask existence fixed-sized periodic wang tiling natural generalization ask existence finite-sized periodic wang tiling thus relying maximum rectangular valid tiling formulation naturally domain size known case therefore must consider constraint form aligned e_k\ne w_k=\ell j+1 aligned 32a aligned s_k n_k=\ell i+1 aligned 32b 32a prevents color mismatch north edge south edge iff tile placed j+1 similarly case 32b prevent color mismatch west edge i,1 east edge iff position i+1 empty finally adding constraint usually search smallest periodic pattern rather largest aligned aligned tile packing problem last extension constitutes setting tile-packing problem require tile placed exactly yet form fixed-sized valid tiling aligned aligned note extension requires otherwise solution exists heuristic algorithm maximum cover tiling problem previous section introduced several integer programming formulation bounded wang tiling problem extension asymptotic complexity integer programming formulation develop simple heuristic algorithm one optimization variant maximum cover maximum row cover tiling let start revising decision program formulation neglecting pair constraint 10b 10d 10c 10e provides totally unimodular constraint matrix recall rectangular valid tiling section consequently simplified problem deterministically solvable using simplex method moreover setting agrees maximum flow problem 10d 10e correspond flow balance source sink whereas 10b 10c correspond kirchhoff law equation complexity reduction possible recognizing shortest path problem structure since source sink capacity equal one allowing single source-to-sink path positive flow emerge omitting constraint pair produce valid tiling finite stripe i.e. row column however edge shared neighboring stripe may comply edge matching rule starting observation first focus efficient approach generate valid tiling row figure transducer-based directed acyclic graph generation valid row tiling full size image follows notation preliminary section valid tiling row visualized -long path transducer graph g_\mathrm recall notation preliminary section simplify subsequent development represent row-tiling problem transducer-based directed acyclic graph dag composed vertex layer first last layer contain single vertex source terminal intermediate layer include vertex represent vertical east west color code tile i.e. state transducer graph source vertex connected vertex second layer facilitating arbitrary coloring west edge first tile similarly vertex penultimate layer linked terminal allow color last east edge intermediate layer bridged transducer edge _\mathrm see fig consequently s\rightarrow path yet-established directed graph form valid tiling row conversely valid tiling build s\rightarrow path however path exist tile set forbid valid tiling row also need incorporate void clearly add void tile edge would interconnect layer i.e. two consecutive layer would form complete bipartite graph however approach requires adding edge graph therefore add supplementary intermediate layer single vertex symbolizing void tile type connect vertex preceding subsequent layer see dashed vertex edge fig consequently generate new edge altogether figure transducer-based directed acyclic graph computing maximum row cover full size image addition assign unitary cost edge incoming void vertex zero cost elsewhere hence s\rightarrow path cost equivalent number void row tiling furthermore emergent graph acyclic single-sourced maximum row-cover tiling found time using dag-shortest-path algorithm denotes set graph vertex set graph edge case aligned aligned 35a aligned 2|\mathscr aligned 35b thus overall asymptotic complexity generate maximum row cover tiling evaluates aligned aligned interestingly running time asymptotic complexity dag-shortest-path algorithm improved recognizing topological order graph vertices—which required dag-shortest-path algorithm—is known graph construction method advance path total cost c_\mathrm contains exactly c_\mathrm void row tiling shortest path algorithm therefore minimizes number void generates maximum row cover output consideration summarized proposition 4.1 shortest path graph fig equivalent maximum row cover tiling consecutive row assuming already covered row i-1\ i+1\ e.g. initially void aim generate maximum cover -th row interestingly requires minor modification graph fig first check north-east compatibility tile placed notice compatibility never violated neighbor void color mismatch case remove edge denoting incompatible tile graph assume row i-1 i+1 void clearly inappropriate tile -th row may prevent vertically-adjacent position populated tile limit appearance introduced void include small penalty 1/2 tile admit single vertical neighbor tile admitting vertical neighbor notice cost selected worst case total penalty due void-preventing weight amount i.e. maximum number tile placed even void position forbid vertical neighbor hence proposition 4.1 remains satisfied consequently build simple heuristic algorithm algorithm requires maximum row-cover iteration rendering overall complexity although algorithm usually generates relatively large ratio number placed tile _\mathrm cov probably lack guaranteed lower bound bound however provided fairly straightforward modification introduced next 1/2-approximation algorithm general tile set section modify algorithm maintain 1/2 approximation ratio start following observation proposition 4.2 consider maximum row-cover tiling odd row initially void domain given maximum row cover tiling section _\mathrm cov 1/2 cov proof consider maximum row-cover problem alone terminates rowcov tile based maximum row-cover property proposition 4.1 none row admit tiling rowcov tile hence _\mathrm cov 1/2 rowcov cov rowcov _\mathrm cov 1/2|\mathscr rowcov 1/2 rowcov 1/2 cov round nearest greater equal integer exploit proposition 4.2 algorithm modify row processing order 1,3,2,5,4\dots indeed odd row contains exactly rowcov tile nevertheless covering -th odd row without acknowledging tile placed i-2 -th row may result unnecessarily empty i-1 -th row avoid situation check compatibility i-1 -th row void rather check using dual transducer graph tile i-2 -th row south color code i-2 -th row find admissible color state dual transducer graph state reachable edge-long path indeed reached state exactly admissible north color compatible tile -th row special case void i-2 -th row color code assumed compatible finally penalize incompatibility cost 1/2 final algorithm read algorithm allowing state following slightly stronger result proposition 4.3 assume tile set longest path transducer graph least algorithm terminates _\mathrm cov 1/2 proof rowcov proof follows directly proposition 4.2 case odd row must contain rowcov tile due proposition 4.1 row-covers maximal sequence consecutive void row exceed two could placed additional tile otherwise contradicting maximum row-cover property moreover without loss generality cost shortest path -th row rowcov rowcov occurs i-2 -th -th row tile-void pattern longest void sequence two longest path least two always place tile north void -th row 2/3-approximation algorithm tilesets cyclic transducer another improvement approximation factor algorithm possible tile set state transducer graph least one graph cycle notice situation occurs tile set tile infinite plane goal modify assignment cost graph row processing order 1,4,3,2,3,7,6,5,6 begin tiling maximum row-cover first row find maximum row-cover 4th row penalize possible incompatibility first row based dual transducer graph step iii encompasses finding cover 3rd row penalized incompatibility first row enforced void even position finally find maximum cover row repeat procedure row number iteratively increased see algorithm make following statement lemma 4.1 consider state transducer graph least one graph cycle algorithm terminates least placed tile proof since tile set allows valid tiling row 1,4 row occupied exactly tile 3,6 row populated least 1/2|\mathscr tile tile row 4,7 admits vertical neighbor finally 2,5 row contain least complement number tile used preceding row tile 1,4,6 row admit south neighbor depending number row algorithm place least aligned cov aligned tile iterative improvement similarly finding maximum row cover search maximum cover column combining two method end final algorithm complexity provides approximation ratio adjustable algorithm choice algorithm line algorithm proposition 4.4 algorithm run polynomial time terminates finite number step proof already shown finding maximum row-cover complexity finding 2-long path transducer graph posse complexity run prior algorithm main loop altogether algorithm requires 4/3|\mathscr inner iteration overall complexity regardless method line algorithm improving loop run time consequently algorithm finite posse complexity result developed several exact heuristic method section devoted numerical examination begin assessing performance integer programming formulation integer programming formulation section heuristic algorithm section also relate result output heuristic algorithm extension integer program investigated subsequent section first demonstrate usefulness packing constraint comparing efficiency solution tile-packing problem using method time reported lagae dutré periodic tile packing problem section subsequently also present two unexpected discovery revealed testing formulation knuth tile set contains tile unusable infinite tiling unusable tile knuth tile set section lagae tile set corner tile lack aperiodicity periodicity lagae corner tile set section implemented method described c++ integer programming solver used state-of-the-art optimizer gurobi 9.5.0 dynamically linked compiled binary numerical test evaluated personal laptop running ubuntu 18.04 operating system equipped ram intel core i5-8350u cpu clocked 1.70ghz integer programming formulation section investigate performance integer programming formulation integer programming formulation section i.e. decision program maximum rectangular tiling maximum cover maximum adjacency constraint satisfaction problem figure new tile set finite1 tile color finite2 tile color used algorithmic test full size image unaware standard set bounded tiling problem except specific mostly aperiodic tile set listed literature recall aperiodic tile set section hence consider set benchmark problem consisting five aperiodic tile set tile color jeandel rao tile color čulík tile color kari tile color ammann tile color robinson two stochastic tile set introduced computer graphic tile color cohen set tile edge color lagae dutré two periodic tile set tile color wang set tile edge color lagae nurmi addition fig introduce two tile set allow valid tiling infinite domain tile set aimed generating valid tiling sized respectively 20\times 20\ 25\ 30\ running time gurobi solver limited second single-threaded mode result shown table illustrate performance decision program surpasses candidate variant however failed find existent feasible solution time limit four time case output optimization problem provided least output interestingly decision problem also efficient case proving domain lack -tilability table benchmark result value marked asterisk denote premature termination integer programming solver objective function value equal best feasible lower bound individual formulation found optimization algorithm formulation objective function value denote feasibility rectangular area covered area number satisfied adjacency constraint respectively full size table comparison optimization variant hint maximum cover maximum adjacency constraint satisfaction problem scale better maximum rectangular tiling indeed generating smaller rectangular domain remains -complete preventing polynomial-time approximation algorithm exist hand formulation admit simple heuristic recall integer programming formulation section allowing solver obtain higher-quality feasible solution faster heuristic algorithm second compare performance maximum cover formulation solved heuristic algorithm supplied three different initial covering i.e. based algorithm algorithm ran sequentially order limit dependence heuristic algorithm ordering tile randomized edge order directed acyclic graph thus evaluated algorithm time tested option listed best worst mean result table table numerical test maximum-cover heuristic algorithm initialized based algorithm best mean run highlighted bold objective function value min avg max column denote smallest average largest area covered independent run heuristic algorithm full size table table follows initialization cover algorithm efficient tested tile set term speed performance remaining two initialization seem fairly comparable average algorithm least 82\ tile always placed 60\ followed algorithm using algorithm obtained least 70\ tile placement comparing table table pattern emerge first heuristic algorithm always generates valid tiling stochastic tile set used aperiodic periodic tile set gurobi required considerably longer time reach feasible solution similar quality usually surpassed developed algorithm time limit case algorithm seen resulting cover competitive output also obtained much shorter time figure periodic packing complete set tile color full size image periodic tile packing problem second numerical example consider periodic tile packing problem investigated computer graphic application considering complete edge tile set lagae dutré searched periodic square valid tiling tile tile set used exactly clearly tiling contain entire textural information stored individual tile also maintain compatibility traditional periodic arrangement lagae dutré proposed backtracking-based algorithm generate periodic packing rely solution decision program supplemented packing fixed periodicity constraint resulting core time spent search single feasible solution table illustrate higher effectiveness method consequently able find periodic tile packing stochastic set wang tile color see fig table periodic tile packing problem comparison core time needed find single feasible solution integer programming second column backtracking method third column proposed lagae dutré find feasible solution full size table unusable tile knuth tile set one oldest aperiodic tile set containing tile color knuth exercise section 2.3.4.3 generating valid tiling knuth tile set using decision program together tile-based boundary condition recall tile-based boundary condition section led unexpected observation enforced placement tile labeled knuth nomenclature make program infeasible certain circumstance careful investigation indeed turned valid tiling tile placed moreover also valid tiling tile placed thus using maximum-cover optimization variant tile enforced respective coordinate exactly optimal solution objective function equal optimal solution objective function equal consequently tile appear strip consecutive infinite column doe allow simply-connected valid tiling infinite plane private communication knuth confirmed issue discovered another tile unnecessary usable infinite valid tiling allowing possible reduction tile set tile information refer interested reader knuth discussion reduced tile set exercise section 7.2.2.1 periodicity lagae corner tile set analogously wang tile connectivity information stored edge lagae dutré introduced corner tile colored corner wang noted formalism interchangeable infinite domino problem considered every set wang tile represented set corner tile greater equal cardinality however corner tile avoid so-called corner problem wang tile computer graphic motivating lagae develop conversion method transforming wang tile corner tile vice versa direct product conversion aperiodic tile set corner tile two method called horizontal vertical translation used convert ammann set wang tile color set corner tile color resulting isomorphic corner tile set claimed aperiodic nurmi noticed set tile unusable infinite valid tiling reduced corner tile set tile color quite surprisingly neither lagae nurmi recognized tile set form torus therefore periodic show next instead developing new formulation another type tile first notice corner tile actually subset wang tile therefore every set corner tile represented set wang tile cardinality see appendix tile solve rectangular tiling formulation periodic boundary condition objective function find smallest tiling output receive optimal value optimal periodic rectangular tiling size surprisingly solution follow two periodic pattern shown fig translation infinite plane figure rectangular periodic valid tiling translating 2\times rectangle infinite valid tiling generated lead different periodic pattern size consequently tile set allows periodic rectangle size 2\times full size image revealed smallest periodic solution remains shown lagae conversion method failed lagae mentioned method lack bijectiveness general assumed case therefore believe useful state condition method bijective show satisfied ammann tile set lemma 5.1 horizontal translation method lagae bijective iff dual transducer graph g_\mathrm input tile set doe contain parallel arc proof horizontal translation method formally mapping _\mathrm corner generates c_p^\mathrm c_q^\mathrm corner tile c_p^\mathrm c_p^\mathrm c_q^\mathrm c_q^\mathrm bijective cardinality output need equal cardinality input mapping produce unique output input consequently tile original tile set must uniquely determined c_p^\mathrm c_p^\mathrm color code vertical edge avoided construction _\mathrm corner let consider dual transducer graph contains parallel arc connecting state c^\mathrm c^\mathrm may exist two tile colored c^\mathrm c_p^\mathrm c^\mathrm c_p^\mathrm c^\mathrm c_q^\mathrm c^\mathrm c_q^\mathrm indistinguishable _\mathrm corner contradicts bijection option transducer graph doe contain parallel arc c_q^\mathrm c_q^\mathrm identifies single arc labeled c_q^\mathrm c_q^\mathrm i.e. single tile completes proof rotating tile set degree argument lemma 5.1 provide condition bijectiveness vertical translation method lemma 5.2 vertical translation method lagae bijective iff transducer graph g_\mathrm input tile set doe contain parallel arc figure transducer graph ammann set wang tile color full size image ammann tile set obtain transducer graph g_\mathrm g_\mathrm shown fig clearly exist parallel arc moreover using approach show horizontal translation method also fails robinson tile set tile color contrary claim corresponding corner tile set also periodic conclusion contribution investigated method generating bounded wang tiling arbitrary tile set goal developed four binary linear programming formulation namely decision maximum-cover maximum adjacency constraint satisfaction maximum rectangular tiling variant supplemented extension controlling individual tile color variable-sized tiling periodicity constraint second part manuscript devoted developing efficient heuristic approximation algorithm maximum-cover integer program variant one maintaining 1/2 approximation ratio arbitrary tile set another 2/3 ratio tile set cyclic transducer reader convenience summarize output study follows based numerical testing collection tile set decision program efficient however time limit imposed tile set doe allow valid tiling entire domain maximum cover maximum adjacency constraint satisfaction problem appear similarly efficient maximum rectangular tiling formulation exhibit worst scalability formulation supplemented packing constraint maintains better solution efficiency wang tile packing problem lagae dutré backtracking approach integer programming formulation allow disprove theoretical result wang tiling illustrated revealing tile knuth tile set unusable two-way infinite tiling proving lagae tile set corner tile lack aperiodicity also included explanation tile set construction method failed among three proposed heuristic algorithm setup algorithm initialized cover generated algorithm produced best result average algorithm faster provided competitive result gurobi software running 300s summarized contribution believe work introduced new method possibly applied material engineering also simple quite extensible framework verify theoretical result wang tiling