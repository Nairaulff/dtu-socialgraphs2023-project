introduction increasing popularity service-oriented computing soc developer benefit reusing web-based service using software service enables users/developers integrate software component different provider ultimately generate value-added software combination mashups mashup developer-centered technology combine service create comprehensive web application addition mashups published reused mashup development one end user development eud model help professional repurpose existing service develop integrated application internet company microsoft ibm google developed several mashup application platform authorize end user create mashups using mashup application platform creator operates easy-to-use web-based therefore development cycle cost application greatly reduced despite convenience still challenging select right service end user process mashup development figure show example process service search tracy reporter going interview business manager order successfully complete interview tracy need find mashup application perform three subtasks namely voice recording voice recognition storage case tracy query service entering three function keywords voice record voice recognition storage find best service list case several key issue raised service recommender system first tracy query recommendation system listing three keywords voice recording voice recognition storage usually challenging task tracy expert field service search search method service based solely keyword matching may ignore high-quality service example even speech voice synonymous google cloud speech api appear list candidate service speech recognition figure toy example process service search figure created using originlab ver.2023 http full size image conclusion challenge faced existing research follows current service recommendation solution requires software developer enter several keywords describe function mashup developed usually brings great challenge service evaluation process developer developer know little function service existing study usually use accurate keyword matching technology service search ignoring possible synonym word change disadvantage easy narrow scope service selection ignore high-quality service cf-based method share experience similar mashups also achieve certain result case sparse data give enough attention matching service mashup requirement overcome limitation existing recommendation model paper proposes service recommendation approach mashup-oriented web service recommendation framework based deep learning called msrdl firstly considering deep learning technology made great progress natural language processing utilize content component extract semantic feature requirement new mashup service express semantic representation semantic representation mashup service input fully connected neural network calculate similarity secondly interaction component utilized learn interactive information existing mashups candidate service obtain top-n neighbor existing mashups similar new mashup based semantic representation based neighbor new mashup get preference new mashup service finally fuse two result obtain final recommendation content component better capture characteristic requirement deep understanding content interaction component provide ability memory-based collaborative filtering main contribution paper threefold transformer model leveraged computation functional similarity mashup requirement service description approach present advantage capable comprehending meaning sentence whilst simultaneously circumventing potential inaccuracy stemming weighting word vector utilizing mashup-service invocation record basis leverage lightgcn model obtain embeddings mashups service compared traditional neural network approach excels feature extraction extensive experiment conducted real-world dataset evaluate proposed approach result indicate proposed approach achieves better performance compared state-of-the-art method remainder paper organized follows section discus related work sect introduces approach detail section discus comprehensive experimental result real world dataset finally sect concludes paper briefly discus future research work related work great success commercial application recommendation system attracted great attention research circle depending type information used recommender system existing service recommendation approach mainly divided three category content-based qos-based service recommendation deep learning technology content-based service recommendation content-based service recommendation method focus mining relationship mashups web service requirement directly recommend web service close mashup recent year recommendation based probabilistic topic model become increasingly popular underlying service topic feature extracted topic model service recommendation made service topic feature matching gao designed model called seco-lda based lda topic model mine potential co-occurrence topic relationship service predict future composition pattern service order help user quickly develop service composition employed model tag topic information mashups service thereby calculating similarity service similarity mashups meanwhile invocation time category information service used derived popularity factorization machine used model information multiple dimension similarity mashups service popularity service etc. predict recommend service corresponding target mashups compared work use deep neural network modeling basis build complete end-to-end service recommendation framework qos-based service recommendation quality service qos description measurement overall performance service availability response time throughput reliability selecting composite service best qos value known qos-based service recommendation kwapong proposed session level representation method based multidimensional attention mechanism enhance matching degree user interaction sequence user intention reduce impact noise interaction meanwhile time-based directional attention mechanism integrated long short-term memory lstm network effectively capture sequential pattern interactive session improve understanding user dynamic preference rangarajan suggested service selection strategy using code source metric verification training code complexity functionality measurement service selection effectively carried besides qos attribute reliability set quality standard service selection service discovery service invocation proposed general collaborative filtering gcf method based neural network model user-service interaction however qos dynamic change time qos-aware method may encounter uncertainty service recommendation deep learning technology rapid development deep learning become trend deliver neural network service recommendation better model web service description document mine hidden information example context word order shi proposed service recommendation method based text extension depth model lstm model two attention mechanism employed service recommendation help select appropriate service chen exploited neural collaborative filtering model learns user preference based invocation record text information mashups service xiong combined collaborative filtering text content invocation interaction function information mashup service integrated deep neural network represent complex relationship mashup service xie proposed framework based generative adversarial network gan service recommendation build heterogeneous information network hin utilized mashups service auxiliary information furthermore constructed mashup-api similarity matrix based meta-paths different semantics finally service recommendation list obtained adversarial training generally speaking existing method rely heavily capturing complex interaction mashups service unrealistic developing new mashups scratch table summarizes aforementioned method service recommendation table summary aforementioned method service recommendation full size table proposed approach service recommendation three step firstly build recommendation model secondly recommendation model trained invocation record service mashups gathered programmableweb developer user submit requirement described natural language candidate collection service generated framework paper demonstrated fig section discus method detail figure framework msrdl figure created using originlab ver.2023 http full size image problem definition definition mashup mashup represents composition one many web service one single application formalized 4-tuple i.e. m_n s_1 s_2 ... s_n ... m_n\ ... represent name text description tag set s_1 s_2 ... s_n represents service record invoked definition service service structure based programming language make easier developer create complex function formalized 3-tuple i.e. s_n ... s_n\ ... represent name text description tag set respectively definition mashup-service invocation given set mashups m_1 m_2 m_q\ set service s_1 s_2 ... s_p\ mashup-service invocation matrix y\in q\times defined according service invocation mashups mashup service mean invoked otherwise problem definition given mashup service history invocation record text information mashups service new required mashup moment user query collection word ranked list service recommended requesting user service higher rank list higher probability adopted user others lower rank service recommendation preprocessing creating new mashup m'\ developer need enter mashup requirement represented d_i\ consisting set phrase sentence even paragraph developer initial query similar mashups description usually contain noise used directly model learning reserve important information text following process usually required text filtering word tag punctuation mark non-characters stop word usually unmeaningful regular expression used filter abbreviation replacement abbreviation replaced complete spelling example dont replaced lemmatization lemmatization process converting word base form lemmatization method based worldnet built-in morph function example word tree reduced word tree word used reduced use example developing mashup named nearplace shown fig description d_i\ pre-processed resulting word set d_i nearplace free store locator google map marker product user friendly time advanced widget thanks extremely easy management always actual news opening hour product service many content component given input token corresponding embeddings including three part namely token segment position input representation constructed summing embeddings study token embedding indicates word embedding word segment segmentation used distinguish two sentence position embedding refers encoding position information word visualization construction seen fig transformer task masking language model self-supervised training together task predicted next sentence masking language model refers randomly masking sub-words text replacing mask label random word leaving unchanged asking model predict sub word covered model learns vector representation text final input token representation e_t\ transformer model constructed summing corresponding token segment position embedding aligned e_t=e_ token +e_ +e_ seg aligned illustrated fig word-level module wlm applies multiple transformer layer iteratively compute hidden representation layer word propagate matching signal word-level simultaneously contains two sub-layers multi-head selfattention sub-layer position-wise feed-forward network figure stage learning representation text description full size image self attention described mapping set key-value pair query key value output output calculated weighted sum value weight assigned value calculated similarity function query corresponding key form attention called scaled dot product attention corresponding mathematical equation follows aligned attention =softmax qk^t d_k aligned represents query key value matrix correspondingly projected e_t\ matrix different learned projection matrix d_k scaling factor avoid extremely small gradient producing softer attention distribution multi-head self-attention layer first mapped parameter matrix self-attention done finally result concatenated sent fully connected layer calculation process aligned head_i=attention e_t w_i^q e_t w_i^k e_t w_i^v aligned aligned multihead head_1 head_2 ... head_h w^o aligned w^o\ w_i^q\ w_i^k\ w_i^v\ learnable parameter represents i-th\ head experimental result show multi head extract feature different head detailed level effect feature extraction better overall computational load single head position-wise feed-forward network fully connected feedforward network word position pas feedforward neural network separately consists two linear transformation two fully connected layer activation function first fully connected layer relu activation function expressed aligned ffn =relu xw_1+b_1 w_2+b_2 aligned w_1\ w_2\ b_1\ b_2\ learnable parameter shared across position transformer layer employ residual connection layer normalization function around two sub-layers extract contextual representation indicates aligned v_m=ln x+ffn aligned final representation mashup service extracted stacking transformer layer denoted v_m\ v_s\ concatenate v_m\ v_s\ utilize mlp capture interaction among v_m\ v_s\ moreover select parametric rectified linear unit relu activation function since improve model fitting nearly zero extra computational cost little overfitting risk learning process written aligned =mlp v_m\oplus v_s aligned learned vector finally feed learned interaction vector sigmoid function whose output represents probability selecting service recommended process written aligned =sigmoid w^t aligned interaction component mashup-service innovation matrix build mashup service tag network graph v=\ v_1 v_2 ... v_n\ represents node set represents edge set mashup set service set used build node set m\cup edge set invocation mashup service connected graph thus forming edge set mashup-service network graph trained based lightgcn model fig show consists part embedding layer mashups service identifier mapped dense vector fixed dimension multiple propagation layer embeddings mashup-service graph propagated final representation generation final representation mashups service generated part figure architecture design figure created using originlab ver.2023 http full size image embedding layer encoders mashup service fixed-length vector e_m^ r^d\ e_s^ r^d\ vector called embedding pre-specified parameter denoting size embedding superscript layer index indicating embeddings output k-th\ propagation layer superscript used indicate output embedding layer initialized embedding layer embeddings iteratively optimized sub-sequential training process lightgcn model mashup service use mashup-service interaction graph update mashup embedding outputted k-1\ -th layer two embeddings generated mashup service mashup-service interaction graph denoted x_m^ x_s^ aligned x_m^ =\sum s\in n_m n_m\vert n_s\vert x_s^ k-1 aligned aligned x_s^ =\sum m\in n_s n_m\vert n_s\vert x_m^ k-1 aligned n_m\ n_s\ denote mashup neighborhood set service neighborhood set mashup-service interaction graph propagated layer embeddings mashup service obtained i.e. x_m^ x_m^ ... x_m^ x_s^ x_s^ ... x_s^ respectively based final representation mashup service generated summing output layer aligned x_m= k=0 ^ka_kx_m^ aligned aligned x_s= k=0 ^ka_kx_s^ aligned service selection ranking transformer model obtain text requirement vector mashups service denoted v_m\ v_s\ meanwhile employing lightgcn model obtain low dimensional representation mashup service denoted x_m\ x_s\ new mashup m'\ need created calculate representation vector using aligned =\sum nm'\in cosine aligned nm'\ neighbor new mashup m'\ paper select top-n neighbor mashups similar new mashup m'\ final representation representation neighbor mashup obtained lightgcn model raking score mashup service calculated taking inner product representation aligned ^s=\frac i=1 ^nx_ nm'_i x_s aligned number neighbor mashups m'\ x_s\ embedding service obtained lightgcn model finally preference mashup service shown aligned final +p_ aligned experiment dataset crawled programmableweb world largest online web service registry march mashups service without functional description service invoked removed original dataset finally dataset includes mashups service invoked mashups least experiment implemented python conducted personal computer equipped intel core cpu clocked 2.4 ghz ram running macos high sierra operating system evaluation metric user request service writing submitting query recommendation system give back top-k relevant result used following metric evaluate recommendation result averaged five-folds metric value final evaluation result precision signed precision measure many recommended service correspond true service testing data given mashup shown top_m represents top service recommended mashup test_m\ represents service actually invoked mashup test set precision model represented precisio-n average precision mashups recall signed recall measure many true service testing data recommended given mashup shown recall model represented recall average recall mashups mean average precision map top service ranking list defined indicates whether service position recommendation ranking list actual component service k_m\ number component service mashup k_i\ denotes number actual component service mashup occurring top service recommendation ranking list aligned precision m=1 ^n\frac top_m test_m\vert aligned aligned recall m=1 ^n\frac top_m test_m\vert test_m\vert aligned aligned map m=1 ^n\frac k_m i=1 k_i aligned evaluation method compare msrdl following strong baseline applied service recommendation field pop first calculates number time service invoked mashup rank based count popularity recommends top-k popular service mashup tf-idf recommends service whose description similar target mashup based vector space model term frequency inverse document frequency used calculate cosine similarity service target mashup sftn topic model neighbor interaction probability calculate similarity score service requirement multiply score rank candidate service ngcf first transformer model represent word embeddings mashup service description employ ngcf explicitly construct bipartite mashup-service graph model high-order connectivity performance finely tuned parameter comparison method compared performance based well-tuned parameter sake fair comparison basically set parameter comparison method value given corresponding researcher regarded best one specially service recommendation set parameter sftn ngcf lightgcn shown fig found tf-idf performs worst even though text description reason may lie ignores order word lead lost semantic information addition descriptive information popularity sftn handle historical usage information somewhat better poor service/requirement representation obtained topic model remain limited performance simple pop performs slightly worse sftn ngcf performs fairly well possible reason extract high quality feature content information learns deep interaction mashups service like msrdl compared baseline model msrdl advantage cf-based method content-based method msrdl outperforms significantly trend significant top-1 recommendation considered mashup small number service averaging two make sense look head recommendation list range from1 msrdl improves baseline method least 5.7 -72.9 precision 6.1 -76.7 recall 6.1 -76.7 map figure performance comparison different approach full size image ablation study ablation study widely used detect importance component machine learning model especially complex neural network msrdl two component worth studying analyzing first one provides interactive recording msrdl removing msrdl obtained ablation model msrdl-ic second one provides requirement extraction msrdl removing msrdl obtained ablation model msrdl-cc figure show performance comparison msrdl msrdl-ic msrdl-cc task service recommendation comparing msrdl msrdl-ic msrdl-cc fig find adding requirement extraction bring 2.5 -9.2 revenue precision 1-5,1.6 -5.4 revenue recall 1-5 1.6 -4.4 revenue map 1-5. find adding interactive recording bring 49.9 -95.9 revenue precision 1-5 89.8 -96.4 revenue recall 1-5 91.5 -96.4 revenue map 1-5 figure performance msrdl variant full size image parameter impact shown fig increase performance msrdl increase result may increase size neighbor mashups help msrdl learn invocation history similar mashups nevertheless exceeds critical point recommended performance msrdl becomes worse may due introduction noise data learning neighbor interaction i.e. mashups low similarity target mashups figure architecture design full size image running time comparison figure reveals pop method outperforms method term speed completing recommendation task within second however recommendation performance suboptimal msrdl method proposed show competitive performance term recommendation accuracy albeit longer processing time specifically tf-idf incurs highest processing time followed ngcf sftn view effectiveness efficiency trade-off proposed msrdl method achieves superior performance follows compared related deep learning-based method empirical running time method deemed relatively acceptable figure running time msrdl compared baseline method full size image conclusion solve problem service selection mashup creation propose mashup-oriented service recommendation framework based deep learning model called msrdl msrdl propose two component content component interaction component content component fully exploit description information interaction component fully exploit mashup service invocation record finally effectively integrate two together make final service selection future plan incorporate qos attribute service recommendation process secondly powerful neural network model used msrdl model enhance effect description modeling