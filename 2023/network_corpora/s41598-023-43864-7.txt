introduction essence blockchain decentralized distributed database blockchain also face dilemma impossible triangle take account decentralization security scalability time decentralization core idea blockchain mean blockchain longer relies central processing node right obligation node equal data system jointly maintained node entire network security refers complete replication data node ensure integrity data use relevant principle cryptography data verification ensure data tampered scalability also refers transaction processing performance mainly reflected throughput network important solution blockchain scalability present sharding technology currently blockchain divided three type according level openness public blockchain consortium chain private chain therefore consensus algorithm correspondingly divided public blockchain consensus algorithm consortium chain consensus algorithm private chain consensus algorithm core technology blockchain consensus algorithm play vital role blockchain important design consensus algorithm ensure decentralization security scalability system much possible public blockchain consensus algorithm typically proof-based proof-of-work pow proof-of-stake first consensus algorithm blockchain technology pow requires node compete right accounting calculating mathematical problem widely used due unfairness caused concentration computing power huge power resource consumed calculation algorithm selects accounting node according amount equity held although solves problem power consumption pow algorithm weakens decentralization however decentralization essential feature blockchain decentralization make system highly fault-tolerant decentralized system cause entire network stop working due single node failure time decentralized system easy attacked attack one node affect operation entire system although proof-based consensus mechanism good node scalability produce problem low throughput time delay time proof-based consensus mechanism inevitably consume computing power memory resource scale increase waste resource serious rapid development blockchain technology current blockchain developed era public blockchain era consortium chain consortium chain become preferred blockchain many field application concurrently consortium chain light consensus algorithm paxos raft classical byzantine fault-tolerant algorithm pbft among paxos raft widely used system without byzantine node however due variability uncertainty network attack may byzantine node network time pbft algorithm prominent advantage paxos raft consensus algorithm concurrently pbft doe require many calculation thus widely used consortium chain word paxos raft tolerate faulty node tolerate byzantine node order able design consensus algorithm based pbft algorithm applicable large-scale consortium chain many scholar performed extensive study improve pbft algorithm example epbft consensus protocol verifiable random function vrf select consensus node making protocol applicable dynamic network although epbft claim reach consensus different failure condition master node fails reach consensus still cause communication overhead reach number node network dgbft consensus protocol markedly reduces communication complexity node grouping although dgbft confidence selection node grouping proxy node protocol ignores possible situation node high credit always act proxy node may cause blockchain tend centralized .the cdbft consensus protocol stimulates enthusiasm node voting reward punishment scheme corresponding credit evaluation scheme however problem ignored cdbft consensus protocol designed credit model complicated greatly reduce efficiency consensus therefore cdbft consensus protocol suitable consortium chain scenario require high efficiency although protocol improved pbft algorithm different perspective increasing network scale communication complexity high credit mechanism used complex therefore important design consensus algorithm applied large-scale consortium chain paper proposes kbft algorithm new consensus protocol used large-scale consortium chain novelty algorithm lie combination consensus algorithm k-prototype clustering algorithm first time markedly reduces communication complexity improves system throughput set efficient fast credit mechanism supervision mechanism ensure security reliability system contribution paper summarized follows first apply k-prototype clustering algorithm node sharding consortium chain end cycle set system kbft use k-prototype clustering algorithm reshape node network prevent node jointly evil etc. thus ensuring security system concurrently resharding new node choose join network addition new node expand scale network reduce proportion byzantine node system use consensus algorithm combine bls multisignature byzantine fault-tolerant algorithm independently parallel achieve consensus transaction shard communication complexity network markedly reduced throughput increase linearly number shard set simple efficient credit mechanism supervision mechanism algorithm score supervise behavior node thus ensuring security system related work practical byzantine fault tolerance pbft improved consensus protocol based original byzantine fault tolerance algorithm bft pbft solves problem low efficiency bft algorithm complexity communication change exponential polynomial however still many problem pbft example number node large communication node lead high network communication overhead network blocking generally number node network exceed master node fails replica node initiate complex view change protocol ensure system activity thus efficiency system markedly reduced pbft doe punishment mechanism malicious node make malicious node stay network continue perform evil behavior based defect pbft algorithm many scholar performed extensive research propose scalable multilayer consensus mechanism based pbft divide node different layer although communication complexity markedly reduced increase number layer still lead longer transaction confirmation time divide node network group primary node first achieves local consensus among node group primary node achieves global consensus literature node grouped consistent hash algorithm communication complexity markedly reduced design algorithm although consensus algorithm proposed literature marked advantage scalability communication complexity compared classical pbft algorithm still produce considerable communication overhead scale blockchain network large many scholar started solve problem simplifying protocol zyzzyva speculative technique reduce communication overhead cost simplify protocol communication overhead reduced value near theoretical minimum fast byzantine consensus generally requires two communication step request reach consensus hotstuff consensus algorithm threshold signature algorithm make communication complexity linearly related number node reduces number signature consensus process using threshold signature deepening research consensus algorithm establishment credit mechanism supervision mechanism also play certain role ensuring security reliability system based traditional pbft algorithm protocol proposed literature add trust value node divide node different role system reduce communication overhead improve system security concurrently cdbft defines voting system based credit reward punishment markedly improve enthusiasm participant eliminate malicious node improve security efficiency system rbft algorithm combine reputation model evaluate work node concurrently node higher reputation likely become master node package block thus reducing risk master node malicious node liu propose monitoring byzantine fault tolerance mechanism add type monitoring node network model monitoring node measure node behavior determine status replica blockchain monitoring node guide new node join blockchain use trust scale sense status node eliminate malicious node crashed node increase throughput system blockchain adopts new technology sharding sharding technology first used database partitioning sharding technology divide large database smaller faster manageable part applying sharding technology blockchain term sharding strategy sharding technology divided three type network sharding transaction sharding state sharding elastico protocol first protocol sharding technology blockchain consensus algorithm however protocol designed public blockchain requires economic incentive encourage node verify thus suitable consortium chain chen proposed new sharding consensus mechanism innovatively combination signature-based anchorshash jump consistent hash function construct shard improves sharding rationality security minimize remapping caused shard change however algorithm serious problem process node sharding complicated used real blockchain system seriously affect overall efficiency system unsupervised learning popular machine learning technology widely used many field example abnormal data found massive big data many advertising platform use technology subdivide user various recommendation system commonly used scenario unsupervised learning clustering dimensionality reduction common clustering algorithm include k-means dbscan hierarchical clustering etc. algorithm consider numerical data k-modes consider categorical attribute data however data engineering problem include numerical data categorical data thus clustering method process two different type data concurrently required k-prototypes method article use k-prototype clustering algorithm sort node according mixed property network proposed algorithm differs literature follows kbft algorithm perform sharding quickly efficiently k-prototype clustering algorithm compared existing algorithm kbft algorithm design simpler efficient credit mechanism supervision mechanism based sharding making network secure reliable analyze detail impact shard size selection security system model algorithm system model improved single mesh network topology multiple mesh network topology structure shown fig model formalized follows target system composed client consensus node supervisory node supervise node divided different shard k-prototype clustering algorithm according numerical classification attribute represented let denote division shard mth shard also let denote number node shard thus selecting node shard proxy node play role similar master node pbft algorithm algorithm selects proxy node shard markedly reduce load single master node increase computing power master node node longer bottleneck affect performance blockchain proxy node shard form proxy committee denoted figure single mesh network topology full size image figure multiple mesh network topology full size image supervisory node supervise set kbft algorithm node performs supervision consensus process whether consensus node actively participates consensus whether malicious change information behavior etc supervise locally store list consensus node network manage information node including node public key address credit etc consensus node network fully trust information recorded supervise order maintain distributed characteristic network decentralized characteristic blockchain greatest extent supervise participate consensus process kbft consensus algorithm serf storage node information client initiate transaction sign transaction sends proxy node shard inside shard consensus node verify transaction byzantine fault-tolerant algorithm based bls multisignature consensus reached block transaction stored locally node however design kbft algorithm doe allow shard retain block data global proxy node merges block generated shard within specified time broadcast entire network data stored node entire network comprehensive losing control shard completely interrupt blockchain comprehensiveness data stored node entire network also line original intention decentralization security blockchain overall system model shown fig figure overall system model full size image security assumption threat model divide node network different shard node shard connected network node know basic information address public key shard disjoint node different shard communicate assume network connection node shard stable network weak synchronization characteristic node broadcast message node arrive within bounded time delay assume adversary computing power limited break encryption technique delay network indefinitely thus use digital signature encryption technique ensure correctness message client model fault free guaranteed client authentication stipulate node joining network must strict identity access mechanism prevent sybil attack argue proposed model vulnerable possible attack could interfere normal operation system assume probability node becoming byzantine node number byzantine node shard assume number node shard thus number byzantine node tolerated shard one third number node shard behavior malicious byzantine node may arbitrary refusing participate consensus collaborating malicious node attack system tampering information however correct node always follow algorithm requirement structure shard network fixed malicious attacker may perform static loop attack slow adaptation attack etc. node network therefore kbft algorithm set constant time interval set time interval expires node network reshuffled manage attack kbft algorithm design system flow kbft algorithm kbft algorithm first initializes system reset trust value node k-prototype clustering algorithm segment node secondly node shard perform consensus processing transaction initiated client node reach consensus transaction client feed back consensus information supervisory node consensus shard fails shard start view switching protocol shard re-consensus process transaction shard proxy node sends local block global proxy node global proxy receives legal number block within specified time package block global block send proxy node time supervisory node score node according information fed back client global proxy node doe receive legal number block within specified time system start global view switching protocol system flow kbft algorithm shown fig figure system flow chart kbft algorithm full size image sharding node kbft algorithm first k-prototype clustering algorithm classify node according numerical attribute categorical attribute numerical attribute include node credit value etc. categorical attribute include company node belongs node address geographic location let node dataset number node object dataset node data node dataset attribute i.e. p+1 numerical attribute front m-p categorical attribute back given positive integer divide node dataset shard sharding step follows randomly select node initial prototype center point specify initial prototype size according real application requirement practical application node object allocated nearest cluster according degree dissimilarity prototype cluster updated allocation dissimilarity formula follows first term formula euclidean squared distance numerical attribute second term simple matching dissimilarity categorical attribute classification node completed prototype category redetermined mean value variable sample numerical type considered feature value new prototype mode value variable sample categorical type considered new prototype feature value repeat step node sample change category return final sharding result kbft algorithm consistency protocol process kbft algorithm includes consensus process shard process corresponding transaction process merging distributing block data consensus process occurs first followed merge distribution process basic flow algorithm shown fig figure kbft algorithm consensus protocol interaction process full size image specific algorithm step follows request phase client sends request message proxy node shard located consensus request performed within shard pre-prepare phase proxy node within shard construct new block broadcast block rest consensus node within shard prepare1 phase node verifies block verification valid bls multisignature algorithm used sign signature fed back proxy node prepare2 phase proxy node wait collect valid signature consensus node receiving least identically signed message including proxy node aggregate individual signature bls multisignature broadcast multisignature node point prepare phase end commit1 phase node verify received multisignature contains least signer verify transaction block broadcast proxy node pre-preparation phase node sign message received prepare2 phase sends proxy node commit2 phase proxy node wait collect least valid signature aggregate signature together form bls multisignature submits new block aggregated signature new block broadcast node verify commit point commit phase end reply phase node submits node sends reply message client client receives least identical confirmation message different node current request reached final consensus feedback phase client receives reply message shard client feed back reply message supervisory node supervisory node score behavior node according feedback result client supervisory node analyze compare message sent client found message sent certain node different sent node message sent certain node received determined node malicious behavior thereafter supervisory node score node based behavior merge-distribute phase proxy node shard broadcast formed local block global proxy node global proxy node merges block receives global block distributes shard proxy node proxy node receives global block send global block node shard point consistency protocol process end credit mechanism supervision mechanism credit mechanism designed kbft algorithm three function first credit score add attribute node used sharding using k-prototype clustering algorithm second credit value node changed consensus kept supervisory node resharding system quickly select proxy node shard global proxy node according credit value finally setting credit mechanism ensure node work better honestly thereby reducing possibility malicious node performing malicious act improve efficiency system credit mechanism designed kbft algorithm simple efficient node behavior quickly scored according node behavior without need complicated score calculation process supervisory node directly increase decrease credit value according behavior node credit value honest node increase consensus credit value node participate consensus decrease credit value node malicious behavior reduced longer participate relevant consensus global sharding node performed malicious act multiple time node removed network banned joining network calculation formula credit value follows score array score honest\ node score not\ participating in\ consensus show\ malicious\ behavior array dynamic resharding mechanism kbft algorithm mechanism dynamic resharding manage attack static sharding proposed threat model time interval set network end system k-prototype clustering algorithm reshape node network cycle number node network numerical categorical attribute contained node different contained process ensures node sharding k-prototype clustering algorithm sharding result different previous result thereby preventing system attacked static sharding resharding time order comply original intention blockchain decentralization trust value node set dynamic resharding trust value remains unchanged node high trust value continue act sharding proxy node global proxy node sharding doe conform characteristic blockchain decentralization time proxy node fails attacked affect security efficiency network selection shard proxy node global proxy node network initialized system randomly select designate node proxy node shard according real application set period end system reshard node network according information node information list stored supervisory node selection proxy node longer random based level trust within shard node high trust degree act proxy node make system secure consensus process robust mechanism selecting global proxy node similar selecting proxy node shard thus selecting proxy node shard select node highest credit selected proxy committee select global proxy node according real application joining new node exiting node performing dynamic sharding number node network increased decreased new node join network node opt network point addition new node improve scalability network increase number node network enhance robustness network node exit includes active exit node removal network penalty due malicious behavior previous consensus malicious node always exist network without processing malicious node may gradually erode good node thus affecting security network view change normal operation kbft algorithm described however fault may occur operation network fault partition primarily consider behavior proxy node consensus partition based pbft algorithm algorithm tolerate one-third node evil concurrently therefore important consider behavior proxy node malfunction mischief may follows proxy node shard broadcast block information new transaction consensus node within set time consensus within shard completed proxy node doe send block global proxy node resulting global proxy node receiving block legal block within set time global proxy node complete work receiving merging distributing block entire network within set time response possible situation proposed algorithm set corresponding countermeasure manage situation reasonably ensure security vitality system proxy node shard fails remaining correct node shard choose new proxy node running local view change node continue work towards reaching consensus number block received global proxy node within specified time minimum threshold set network system perform emergency resharding mechanism view change within shard view change protocol kbft complex pbft consensus shard completed within specified time replica node doe receive message sent proxy node shard trigger view change protocol shard specific process replica node shard must send message requesting view change supervise supervise receives view change message sent half node shard supervise broadcast node highest trust value shard node client shard shard consensus restart flow chart view switching within shard shown fig figure intrashard view change flowchart full size image global view change global view change also called emergency resharding mechanism different resharding end cycle set network primary difference two trigger timing different emergency resharding triggered number block received global proxy node within specified time minimum threshold set network global proxy node doe distribute merged block performed k-prototype clustering algorithm however emergency resharding mechanism global proxy node selected resharding still last time proxy node second highest trust value proxy node set serve global proxy node security analysis shard size selection size shard important security system transaction generated client shard byzantine fault-tolerant consensus algorithm based bls multisignature thus number byzantine node tolerate shard doe exceed one-third total number node shard thus make following two assumption assumption number node shard assumption probability failure node according assumption probability formula shard successfully reach consensus described shown formula fail consider equal 0.2 visualize function image formula shown fig figure intrashard consensus failure rate different shard size full size image shown fig probability failure node constant gradual increase shard size consensus failure rate gradually decrease number node shard increase probability one-third malicious node included one thousand thus probability consensus failure negligible probability analysis successful global block formation kbft set minimum merged block threshold minimum sum block sent global proxy node proxy node shard complete consensus process divided two step first step consensus within shard second step merging distribution block node network divided n/k shard must analyze threshold consensus required keep entire system secure alive event faulty node shard exceed 1/3 thus consensus successfully reached within shard probability failure node also event number block finally merged global agent node greater equal set minimum threshold thus global block successfully formed therefore derive probability event binomial distribution follows substituting formula formula probability success complete event described follows intuitively visualize relationship success rate successfully forming global block visualize function image formula different shown fig figure analysis result relationship success rate different full size image shown fig number node network equal number node shard inflection point probability curve gradually delayed threshold minimum merged block decrease concurrently probability failure node smaller success rate higher node failure probability controlled equal 0.2 kbft algorithm guarantee success rate analysis kbft algorithm communication overhead assuming total number node kbft pbft algorithm network avoid losing generality assume number node shard kbft network divided n/k shard according pbft communication overhead calculated literature consensus protocol interaction process kbft algorithm fig two conclusion drawn follows conclusion communication complexity required pbft algorithm complete consensus specific communication overhead pbft conclusion kbft algorithm performs node sharding shard independently performs byzantine fault-tolerant consensus based bls multisignature therefore complexity completing consensus specific communication overhead kbft let ratio communication overhead two algorithm formula obtained formula formula follows kbft pbft figure function diagram respectively fig respectively range fig 4,88 figure graph ratio communication full size image figure graph ratio communication full size image according fig number node network communication ratio decrease number node fragment decrease indicating smaller number node fragment better kbft algorithm reduce communication overhead second shard size fixed ratio communication overhead two algorithm gradually decrease number network node increase indicating larger network scale advantageous kbft algorithm node communication resource shown fig total number node network using pbft algorithm kbft algorithm large number even change communication overhead ratio two nearly constant according formula denominator much larger numerator large thus fixed influence change nearly unchanged throughput throughput defined total amount transaction transaction network process per unit time expressed formula follows time total transaction volume packaged block time time time interval completion transaction creation transaction chain assume total transaction volume generated system using pbft algorithm kbft algorithm per unit time assume total volume generated per unit time system using pbft kbft number node participating consensus two system volume contained block former process transaction node reach agreement thus node throughout network transaction consensus latter shard transaction shard process different transaction therefore throughput system using kbft algorithm n/k time system using pbft algorithm n/k number shard network kbft network sharding transaction sharding total throughput increase linearly increase number shard reliability robustness proxy node shard kbft algorithm global proxy node selected according credit value node high credit value lead consensus node shard complete consensus effectively promote efficiency system operation ensure safety reliability entire system concurrently node scored according consensus behavior encourage honest node perform better malicious node reduce credit value even eliminated network due malicious behavior master node byzantine node complex switching view performed achieve reconsensus markedly reduce efficiency master node byzantine node consensus fail remaining replica node execute complex view switching protocol select new master node reconsensus markedly reduce efficiency pbft algorithm also doe impose penalty malicious behavior byzantine node may cause byzantine node continue malicious behavior without paying price concurrently kbft algorithm designed blockchain network fixed number node new node choose join network network resharding increase number node network reduces proportion malicious node thus ensuring robustness system improving security system simulate consensus use python conduct simulation experiment kbft algorithm simulated consensus set failure probability single node independent variable success rate dependent variable concurrently consensus simulation set total number network node number node shard minimum merged block threshold reason number node shard set according fig number node shard failure rate reaching consensus within shard reduced result simulated consensus experiment repeated time shown fig figure simulated consensus result full size image figure show curve obtained simulation consensus experiment repeated time accurately fit curve obtained according formula fifth part sufficient show proposed probability analysis successful formation global block fifth part correct therefore conclusion obtained fig applicable analysis fig thus probability failure node small kbft algorithm guarantee success controlled blockchain requires identity access mechanism consortium chain concurrently credit supervision mechanism designed kbft algorithm also ensure probability node failure small simulated consensus experiment conducted study consistent assumption made analysis successful global block formation fifth part make meaningful compare two combining theoretical analysis simulated consensus experiment demonstrate proposed simulated consensus experiment effective accurate comparison consensus algorithm list compare several improved consensus algorithm based pbft algorithm table main comparison indicator communication complexity throughput node sharding credit mechanism supervision mechanism byzantine fault tolerance table comparison consensus algorithm full size table conclusion paper proposes new kbft algorithm current situation pbft algorithm existing new algorithm based pbft improvement applied large-scale consortium chain kbft k-prototype clustering algorithm quickly shard node network consensus algorithm based combination bls multisignature byzantine fault-tolerant algorithm shard markedly improves scalability network markedly reduces communication overhead concurrently transaction sharding throughput increase linearly increase number shard kbft algorithm also establishes efficient simple credit mechanism supervision mechanism ensure security reliability system application scenario high scalability requirement high security financial service energy transaction internet thing kbft algorithm good solution however kbft divide node network uniformly different institution consortium chain divided layer thus node representing institution also divided layer therefore future work plan investigate hierarchically divide node